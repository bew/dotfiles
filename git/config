[user]
  email = benoit.dechezelles@gmail.com
  name = Benoit de Chezelles

[github]
  # some tools uses this
  user = bew

# ------

[core]
  excludesfile = ~/.dot/git/global_gitignore

[help]
  autocorrect = immediate

[init]
  defaultBranch = main

[commit]
  # Always enable `--verbose` on commit/squash/...
  # (shows diff of what is being commited <3)
  verbose = true

[push]
  # When 'push' subcmd is called without a remote branch,
  # use the current local branch name as the remote branch name.
  default = current

[pull]
  # Only allow fast-forward merge when using 'pull'.
  # => Non-ff merge is not attempted automatically and will need to be done manually.
  ff = only

[merge]
  # When 'merge' subcmd is called without any ref, merge the upstream branch in.
  defaultToUpstream = true

  # Do not keep '.orig' files around after a merge conflict for that file,
  # (I can always find the original files with git!)
  keepBackup = false

  tool = nvim_diffconflicts

[mergetool "nvim_diffconflicts"]
  # Using vim helper plugin: https://github.com/whiteinge/diffconflicts
  cmd = nvim -c DiffConflictsWithHistory "$MERGED" "$BASE" "$LOCAL" "$REMOTE"

[rebase]
  # Automatically create a temporary stash entry before the operation begins, and apply it after the
  # operation ends.
  autoStash = true

  # Print a warning when deleting commit lines in interactive rebase.
  # (use an explicit 'drop' action to avoid the warning)
  missingCommitsCheck = "warn"

[diff]
  # Give a little bit more context in diffs (defaut is 3)
  context = 10
  # TODO (bug report?): does not seems to work on diffs visible in `git add -p`.

  # Moved lines of code are colored differently
  colorMoved = default
  # Ignore whitespace changes for indentation only
  colorMovedWS = allow-indentation-change

  # Limit the size of --stat graph (++++----)
  # Important for `git show --patch-with-stat` to avoid line wrapping
  # (which is not automatically detected for some reasons..)
  statGraphWidth = 30

[color]
  interactive = true

[color "status"]
  untracked = "cyan"

[color "diff"]
  # color settings for 'colorMoved' option
  oldMoved = italic 31 52
  newMoved = italic 31 22
  # (alternative color, used when 2 different block of moved lines are next to each other)
  oldMovedAlternative = italic 97 52
  newMovedAlternative = italic 97 22

# Useful when I can't use SSH to communicate with github and I don't want to
# type my password/personal-token everytime.
#
# [credential "https://github.com"]
#   username = bew
#   helper = github-bew-password-from-env

[alias]
  # index manipulation (staging area)

  a  = add
  ap = add -p
  an = add -N

  com   = commit
  comp  = commit -p
  comam = commit --amend

  # Inverts a previous `git add file`
  # (same as new command `git restore --staged file` except
  # that it also works without `file` and unstages all files)
  # NOTE: changes the index only (the staging area)
  unstage = reset HEAD

  # Stage the deletion of a file
  # NOTE: changes the index only (the staging area),
  #   the working tree isn't touched at all
  #   (the file isn't actually deleted)
  untrack = rm --cached

  # repo manipulation
  f = fetch
  m = merge
  ch = checkout
  sw = switch
  sth = stash

  # branch manipulations

  chb = checkout -b
  swc = switch -c

  br = branch
  brv = "!git --no-pager branch -vv"

  br-gone = !git --no-pager -c color.ui=always branch -vv | grep ': gone'
  brg = br-gone


  # remote interaction
  ph = push
  pl = pull
  rem = remote -v

  # repo size helpers
  gc-remove-old-commits = reflog expire --all --expire=now
  gc-compress-repo = gc --aggressive --prune=now

  # --- Info aliases

  s   = status --ignore-submodules=all
  suf = status --untracked-files

  # log (minimal: with metadata + subject)
  pretty-log = log --graph --decorate --pretty='%C(bold blue)%h%C(auto)%d %C(237)[%C(italic 65)%ar%C(reset 237)]   %C(italic 240)by %an%C(reset)%n%s%n'
  l  = pretty-log
  la = pretty-log --all

  # log (verbose: with metadata + subject + body + notes)
  # (~same as: pretty-log + the commit body & notes if available)
  pretty-log-verbose = log --graph --decorate --pretty=format:'%C(bold blue)%h%C(auto)%d - %C(237)[%C(italic 65)%ar%C(reset 237)]   %C(italic 240)by %an%C(reset)%n%s%n%+b%-N%n'
  lv  = pretty-log-verbose
  lva = pretty-log-verbose --all

  # log (simplified logs, similar to --oneline but prettier)
  pretty-log-oneline = log --graph --decorate --pretty=tformat:'%C(red)%h%C(reset) - %s %C(green)(%cr) %C(blue)<%an>%C(reset)%C(auto)%d%C(reset)'
  lo = pretty-log-oneline

  # NOTE: using the verbose version, because it's more complete,
  # and does not add a blank line at the end.
  last-log = !git --no-pager pretty-log-verbose -n1
  ll = last-log

  pretty-log-next-push = pretty-log @{u}..
  lp = pretty-log-next-push

  # diff
  d   = diff
  dc  = diff --staged
  dd  = diff -w
  ddc = diff -w --staged

  # Diff side-by-side with delta (instead of unified diff)
  dds = !git -c delta.features=split-layout dd
  ds  = !git -c delta.features=split-layout d

  stat = !git --no-pager diff --stat --summary
  show-with-stat = !git show --patch-with-stat --summary

  # Helper to find the base-commit between a base branch (usually master/main) and
  # a head ref (usually HEAD).
  # (we want to find the commit before the first commit on the branch)
  z--base-branch-helper = !git merge-base --octopus ${BASE_BRANCH:-main@\\{u\\}} ${HEAD_REF:-HEAD}

  # --- Info aliases on current branch

  # --unified is for the up/down diff context around hunks
  review-branch          = !git diff --unified=30   $(git z--base-branch-helper)
  review-branch-full-ctx = !git diff --unified=9999 $(git z--base-branch-helper)
  # (now with side-by-side delta diff layout)
  review-branch-s          = !git dds --unified=30   $(git z--base-branch-helper)
  review-branch-full-ctx-s = !git dds --unified=9999 $(git z--base-branch-helper)

  log-branch         = !git pretty-log         $(git z--base-branch-helper)..
  log-branch-verbose = !git pretty-log-verbose $(git z--base-branch-helper)..
  lb  = log-branch
  lvb = log-branch-verbose

  stat-branch = !git stat $(git z--base-branch-helper)..

  # --- Info aliases on last merge

  diff-last-merge = diff ORIG_HEAD..
  dlm = diff-last-merge

  log-last-merge         = pretty-log         ORIG_HEAD..
  log-verbose-last-merge = pretty-log-verbose ORIG_HEAD..
  llm  = log-last-merge
  lvlm = log-verbose-last-merge

  stat-last-merge = stat ORIG_HEAD..
  slm = stat-last-merge

# --- BEGIN delta config

[core]
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  features = unified-layout
  syntax-theme = DarkNeon

  paging = always ; always use a pager
  ; Note that diffs in `git add -p` will never use the pager.

  line-numbers = true

  relative-paths = true
  file-modified-label = "changed:"
  file-removed-label = "nuked:"
  hunk-label = "§"

  # Removed lines
  minus-style = syntax 52
  minus-emph-style = normal bold 88

  # Added lines
  plus-style = syntax 22
  plus-emph-style = normal bold 28

  # Line number style to match added/removed line
  # Not working in a useful way for now, see: https://github.com/dandavison/delta/issues/247
  ; line-numbers-minus-style = normal 52
  ; line-numbers-plus-style = normal 22

  file-style = bold 166
  file-decoration-style = none
  # NOTE: the decoration styles ul/ol/box uses unicode chars AFAIK

  commit-decoration-style = ol

  hunk-header-style = 243 236 # light grey on dark grey
  hunk-header-decoration-style = bold

[delta "unified-layout"]
  features = navigate

  ; >> Unicode separators:
  line-numbers-left-format = {nm:^5}¦
  line-numbers-right-format = {np:^5}│
  ; >> ASCII separators:
  ; line-numbers-left-format = {nm:^5}:
  ; line-numbers-right-format = {np:^5}|

# NOTE: This group of delta settings is enabled for some of my git aliases
#       using `git -c delta.features=split-layout ...`
[delta "split-layout"]
  features = navigate side-by-side

  ; >> Unicode separators:
  line-numbers-left-format = ┃{nm:^5}│
  line-numbers-right-format = ┃{np:^5}│
  ; >> ASCII separators:
  ; line-numbers-left-format = |{nm:^5}|
  ; line-numbers-right-format = |{np:^5}|
  line-numbers-left-style = red
  line-numbers-right-style = green

# --- END delta config

# vim:set ft=gitconfig:
