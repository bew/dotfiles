# See IDEA for complex aliases metadata & completions at the end of the file
[alias]

  # List aliases that start with given word, defaults to all
  aliases = "!f() { git --no-pager config --get-regexp ^alias.$1; }; f"

  # index manipulation (staging area)

  a  = add
  ap = add -p
  an = add -N

  com   = commit
  comp  = com -p
  comdry-run = com --dry-run --untracked-files=no
  # Edit (replace) last commit (should not be used if already pushed!)
  comedit-last = com --amend
  # Fixup (last) commit message (content untouched)
  comfix-reword-last = com --fixup=reword:HEAD
  comfix-reword = "!f() { \
    [[ $# -eq 0 ]] && { >&2 echo \"Usage: git comfix-reword <rev>\"; exit 1; }; \
    local rev=$1; shift; \
    git com --fixup=reword:$rev \"$@\"; \
  }; f"
  # Fixup (last) commit content (message untouched)
  comfix-add-to-last = com --fixup=HEAD
  comfix-add-to = "!f() { \
    [[ $# -eq 0 ]] && { >&2 echo \"Usage: git comfix-add-to <rev>\"; exit 1; }; \
    local rev=$1; shift; \
    git com --fixup=$rev \"$@\"; \
  }; f"
  # Fixup (last) commit message & content
  comfix-edit-last = com --squash=HEAD
  comfix-edit = "!f() { \
    [[ $# -eq 0 ]] && { >&2 echo \"Usage: git comfix-edit <rev>\"; exit 1; }; \
    local rev=$1; shift; \
    git com --squash=$rev \"$@\"; \
  }; f"
  #
  # NOTE interesting flags:
  # --fixup=amend:<rev>
  # --fixup=reword:<rev>
  # --squash=<rev>
  # FIXME: I don't understand the difference between `--fixup=amend:<rev>` & `--squash=<rev>`
  #
  # These need to be `git rebase --autosquash`-ed to be merged with their related commits

  # Show the raw commit msg in a (potentially different) repo
  # Can be used to get/use the same commit message for a new commit, optionally from another repo.
  # Usage: `git get-msg [<repo-path=.>] [<rev=HEAD>]`
  # NOTE: If the first param is a path to a directory, it is used as the repo path
  get-msg = "!f() { \
    [[ -d \"$1\" ]] && { repo_path=\"$1\"; shift; }; \
    git --no-pager -C \"${repo_path:-.}\" log -n1 --pretty=format:%B ${1:-HEAD}; \
  }; f"

  # Inverts a previous `git add file`
  # (same as new command `git restore --staged file` except
  # that it also works without `file` and unstages all files)
  # NOTE: changes the index only (the staging area)
  unstage = reset HEAD

  # Stage the deletion of a file
  # NOTE: changes the index only (the staging area),
  #   the working tree isn't touched at all
  #   (the file isn't actually deleted)
  untrack = rm --cached

  # repo manipulation

  f = fetch --verbose
  fa = f --all

  m = merge
  ch = checkout
  sw = switch

  sth = stash

  reb  = rebase
  rebi = rebase -i
  # Do not changes commit dates of rebased commits
  # NOTE: the entire history of the rebased branch will be composed of new commits.
  # (posts where I found that mentioned it's not 100% reliable for all commit types, so this is
  # not in default reb/rebi, and make sure to check the resulting history)
  reb-keep-dates  = rebase --committer-date-is-author-date
  rebi-keep-dates = rebase --committer-date-is-author-date

  dtool = difftool
  mtool = mergetool

  # branch manipulations

  chb = checkout -b
  swc = switch -c
  nb = switch -c
  # note: nb is 'new branch'

  br = !git --no-pager branch
  brv = !git --no-pager branch -vv
  brr = !git --no-pager branch -r
  bra = !git --no-pager branch -a

  br-gone = !git --no-pager -c color.ui=always branch -vv | grep ': gone'
  brg = br-gone


  # remote interaction
  ph = push
  # ref: https://blog.gitbutler.com/git-tips-2-new-stuff-in-git/#safe-force-pushing
  ph-force-safe = push --force-with-lease
  phF = ph-force-safe
  pl = pull
  rem = remote -v

  # git helpers
  clone-fast = clone --filter=blob:none
  revp = rev-parse
  gc-remove-old-commits = reflog expire --all --expire=now
  gc-compress-repo = gc --aggressive --prune=now
  # ref: https://stackoverflow.com/a/47580886/5655255
  # (note: does not add untracked files)
  normalize-crlf = add --renormalize
  repo-normalize-crlf = normalize-crlf .


  # info aliases

  s   = status --ignore-submodules=all
  sau = status --untracked-files=all
  snu = status --untracked-files=no

  # log (minimal: with metadata + subject)
  pretty-log = log --graph --pretty=bew-minimal
  l  = pretty-log
  la = pretty-log --all

  # log (verbose: with metadata + subject + body + notes)
  # (~same as: pretty-log + the commit body & notes if available)
  pretty-log-verbose = log --graph --pretty=bew-verbose
  lv  = pretty-log-verbose
  lva = pretty-log-verbose --all

  # log (simplified logs, similar to --oneline but prettier)
  pretty-log-oneline = log --graph --pretty=bew-oneline
  lo = pretty-log-oneline

  # NOTE: using the verbose version, because it's more complete,
  # and does not add a blank line at the end.
  last-log = !git --no-pager pretty-log-verbose -n1
  ll = last-log

  pretty-log-next-push = pretty-log @{u}..
  lp = pretty-log-next-push

  # diff
  dd  = diff
  ddc = diff --staged
  d   = diff -w
  dc  = diff -w --staged

  # Diff side-by-side with delta (instead of unified diff)
  dds = !git -c delta.features=split-layout dd
  ds  = !git -c delta.features=split-layout d

  stat = !git --no-pager diff --stat --summary
  show-with-stat = !git show --patch-with-stat --summary

  repo-info = !onefetch

  # --- Info aliases on current branch

  # Helper to find the base-commit between a base branch (usually master/main) and
  # a head ref (usually HEAD).
  # (we want to find the commit before the first commit on the branch)
  z--base-branch-helper = !git merge-base --octopus ${BASE_BRANCH:-main@\\{u\\}} ${HEAD_REF:-HEAD}

  # --unified is for the up/down diff context around hunks
  rv-diff          = !git diff --unified=30   $(git z--base-branch-helper)
  rv-diff-full-ctx = !git diff --unified=9999 $(git z--base-branch-helper)
  # (now with side-by-side delta diff layout)
  rv-diff-s          = !git dds --unified=30   $(git z--base-branch-helper)
  rv-diff-full-ctx-s = !git dds --unified=9999 $(git z--base-branch-helper)
  rd  = rv-diff
  rds = rv-diff-s

  rv-log         = !git pretty-log         $(git z--base-branch-helper)..
  rv-log-verbose = !git pretty-log-verbose $(git z--base-branch-helper)..
  rl  = rv-log
  rlv = rv-log-verbose

  rv-stat = !git stat $(git z--base-branch-helper)..

  # --- Info aliases on last merge

  diff-last-merge = diff ORIG_HEAD..
  dlm = diff-last-merge

  log-last-merge         = pretty-log         ORIG_HEAD..
  log-verbose-last-merge = pretty-log-verbose ORIG_HEAD..
  llm  = log-last-merge
  lvlm = log-verbose-last-merge

  stat-last-merge = stat ORIG_HEAD..
  slm = stat-last-merge

  # NOTE: autocompletion of complex aliases like `!f() { foo; bar "$@"; baz }; f` doesn't work on my
  # zsh config, but there seems to be support for that anyway in the provided contrib in git's git repo:
  #   https://github.com/git/git/blob/43c8a30d150ecede970/contrib/completion/git-completion.bash#L26-L30
  # the bash completion script should be supported on zsh as well if I refer to the zsh completion at:
  #   https://github.com/git/git/blob/43c8a30d150ecede9709c1/contrib/completion/git-completion.zsh#L21
  # My zsh uses the default zsh-specific completions for git that comes with zsh, which support the
  # full power of zsh categories (tags) for completions (cf `git checkout <trigger-completion>`).
  # I don't think the completion scripts in https://github.com/git/git use zsh' full features.. :/
  #
  #
  # IDEA: define additional aliases that aren't supposed to be used,
  # to define completion values & information.
  #
  # Example:
  # aliases = ...
  # _aliases--description = "Get aliases, all or prefix"
  # _aliases--usage = "$ALIASNAME [<prefix>]"
  # _aliases--completer = "!f() { git aliases | awk -F' |\\.' '{print $2}' }; f"
  # Or even more generic (but requires good json(/nuon?) support.. hard to type in gitconfig)
  # _aliases--metadata = "{description: ..., usage: ..., ... }"

# vim:set ft=gitconfig:
