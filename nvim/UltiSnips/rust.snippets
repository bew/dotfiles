#######################################################################
#                            Rust Snippets                            #
#######################################################################

snippet let "let variable declaration" b
let ${1:name}${2:: ${3:type}} = ${4};
endsnippet

snippet letm "let mut variable declaration" b
let mut ${1:name}${2:: ${3:type}} = ${4};
endsnippet

# Increase priority of this 'fn' snippet, to avoid conflict with the
# other 'fn' snippet, used for closure when the cursor is not at BOL.
priority 10
snippet fn "A function, optionally with arguments and return type." b
fn ${1:function_name}(${2:arg: type})${3: -> ${4:ret_type}} {
	${10:${VISUAL}}
}
endsnippet
priority 0

snippet fn "Closure, anonymous function (inline)" w
|${1}| ${2:{$3}}
endsnippet

snippet p "println!(..) with endline" w
println!("${1}"${2});
endsnippet

snippet pi "print!(..) inline" w
print!("${1}"${2});
endsnippet

snippet fmt "format!(..)" w
format!("${1}"${2});
endsnippet

snippet dbg "Debug expression" w
dbg!(${1:${VISUAL}})
endsnippet

snippet ma "match .. { .. }" w
match ${1:expr} {$2}
endsnippet

# snippet b "{ .. } block" w
# {${1:${VISUAL}}}
# endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} (
	(${2:matcher}) => (
		${3}
	)
)
endsnippet

snippet for "for .. in .." b
for ${1:i} in ${2} {
	${VISUAL}${0}
}
endsnippet

snippet com "Comment"
// $0
endsnippet

snippet todo "A Todo comment"
// TODO: $0
endsnippet

snippet note "A Note comment"
// NOTE: $0
endsnippet

snippet st "Struct" b
struct ${1:Name} {
	${VISUAL}${0}
}
endsnippet

snippet ann "#[...] annotation" b
#[${1:derive(${2:Debug$3})}]
endsnippet

snippet en "Enum" b
enum ${1:Name} {$2}
endsnippet

snippet impl "Struct/Trait implementation" b
impl ${1:TypeOrTrait}${2: for ${3:Type}} {
	${0}
}
endsnippet

snippet x "except(...)" w
expect("${1:message}")$99
endsnippet

# vim:ft=snippets:
