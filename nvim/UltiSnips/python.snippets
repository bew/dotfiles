priority -50

# definitions

snippet cl "class definition" b
class ${1:MyClass}${2:(${3:object})}:
	$99
endsnippet

snippet def "function" b
def ${1:function_name}(${2:self${3:, ${4:arg}}}):
	${5:${VISUAL:pass}}
endsnippet

snippet defi "initializer" b
def __init__(self${1:, ${2:arg}}):
	${3:${VISUAL:pass}}
endsnippet

snippet defc "class method" b
@classmethod
def ${1:function_name}(cls${2:, ${3:arg}}):
	${4:${VISUAL:pass}}
endsnippet

snippet defs "static method" b
@staticmethod
def ${1:function_name}(${2:arg}):
	${3:${VISUAL:pass}}
endsnippet

snippet defp "property method" b
@property
def ${1:function_name}(self):
	${2:${VISUAL:pass}}
endsnippet

# if / elif / else

snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet elif "elif ..." b
elif ${1:condition}:
	${2:pass}
endsnippet

snippet el "else" b
else:
	${1:pass}
endsnippet

snippet ifmain "ifmain" b
if __name__ == "__main__":
	${1:${VISUAL:main()}}
endsnippet

# for

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

# try

snippet try "Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception}${3: as ${4:e}}:
	${5:raise $4}
endsnippet

# misc

snippet /""/ "triple quoted string (double quotes)" r
"""
${VISUAL}$1
"""$0
endsnippet

snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python3
endsnippet

snippet doc "One line doc" b
"""${1:${VISUAL:TODO: doc}}"""$99
endsnippet

snippet mdoc "Multi line doc" b
"""${1:TODO: oneline doc}
${2:${VISUAL:TODO: doc}}
"""$99
endsnippet

snippet p "print(...)" b
print(${1:${VISUAL}})
endsnippet

snippet pp "pprint(...)" b
from pprint import pprint; pprint(${1:${VISUAL}})  # noqa: E702
endsnippet

snippet f "f format str" w
f"$1"$99
endsnippet

snippet s "self.X = X" b
self.${1:name} = $1
endsnippet

snippet pdb "pdb oneliner"
__import__("pdb").set_trace()  # FIXME: remove this debug probe
endsnippet

# vim:ft=snippets:
