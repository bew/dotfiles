# Tmux config file
# vim: set ft=tmux:

set-option -g mode-keys vi
set-option -g status-keys vi

# Allow multiple commands to be entered without pressing the prefix-key
# again in the specified time milliseconds (the default is 500).
# A key is allowed to repeat when it is bound with `bind-key -r`.
set -g repeat-time 1000 # 1 sec

# ---

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# <prefix>c for new window after last one (default keybinding)
# <prefix>C for new window next to current window
bind-key C new-window -a

# In addition to n/p, C-n/C-p are easier to type after C-b prefix.
bind-key -r C-n next-window
bind-key -r C-p previous-window

bind-key -r C-j select-pane -D \; display-pane
bind-key -r C-k select-pane -U \; display-pane
bind-key -r C-h select-pane -L \; display-pane
bind-key -r C-l select-pane -R \; display-pane
bind-key -r bspace select-pane -L \; display-pane # When mapping C-h has no effect

bind-key -r C-o select-pane -t :.+ \; display-pane
bind-key -r o   select-pane -t :.+ \; display-pane

bind-key C-space last-pane \; display-pane
bind-key space   last-pane \; display-pane

# Select a session/window/pane, same as the default, but sorted by name
bind-key s choose-tree -Zsw -O time

bind-key N command-prompt -p "New session name:" "new-session -s '%%'"

# Switch to pane which has the given PID (not exactly, see NOTE)
# Inspired by: https://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html
#
# Basically:
# - ask the PID (available as %% afterward)
# - use ps to show the env of process with PID, find the var TMUX_PANE
# - use it to switch to pane
#
# NOTE: the original code only switched to the correct session, I wrote a little script
#       to switch to the exact pane from its id.
bind-key W command-prompt -p "Switch to pane with pid:" "run-shell 'pane_id=\$(ps eww %% | sed \"1d; s/^.*TMUX_PANE=//;s/ .*//\"); [[ -n \$pane_id ]] && ~/.dot/bin/tmux-goto-pane-id \$pane_id || tmux display-message \"could not find pid\"'"

bind-key M-- select-layout even-horizontal # most common layout for me (pane1 | pane2)
bind-key M-| select-layout even-vertical # NOTE: M-| does not trigger currently..
bind-key M-= select-layout # re-apply current layout (to equalize if needed)

# --------- Copy mode config

# disable "release mouse drag to copy and exit copy-mode", ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# this line changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
bind-key -n MouseDrag1Pane if-shell -F -t = '#{mouse_any_flag}' "if -Ft= '#{pane_in_mode}' 'copy-mode -eM' 'send-keys -M' " "copy-mode -eM"

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
# Stolen from https://github.com/lencioni/dotfiles/commit/f8fc959c70a3e3d4772caa5b81421e745a328389
# NOTE: `-t =` targets the pane under the mouse.
bind-key -T root DoubleClick1Pane if-shell -t = -F '#{alternate_on}' "send-keys -M" "copy-mode -t = ; send-keys -X select-word"
bind-key -T root TripleClick1Pane if-shell -t = -F '#{alternate_on}' "send-keys -M" "copy-mode -t = ; send-keys -X select-line"

# Make double right click exit copy-mode (so I don't have to reach 'q' every time!)
bind-key -T copy-mode-vi DoubleClick3Pane send-keys -X cancel
# NOTE: When tmux implements it, normal right click could be used to extend the selection.
#
#   There are no extend-selection actions yet. There is append-selection, but it does
#   not do what I want (I want extend existing non-copied selection, not add separate
#   thing to the previously copied selection)
#
#   It _might_ be possible to simulate extend-selection by getting current cursor pos,
#   mouse pos and send necessary cursor-{up,down,left,right} commands to move the
#   selection cursor to the mouse pos..

# vim-like selection manipulation
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# Copy the selection to tmux/system clipboard
bind-key -T copy-mode-vi M-c send-keys -X copy-selection \; display-message "Copied to tmux clipboard"
bind-key -T copy-mode-vi M-C send-keys -X copy-pipe "cli-clipboard-provider copy-to system" \; display-message "Copied to system clipboard"

# Make it possible to emulate mouse scrolling when the running program does not support it.
bind-key -T root S-WheelUpPane send-keys -t = Up Up Up
bind-key -T root S-WheelDownPane send-keys -t = Down Down Down
