# -----------------------------------------------------------
# --- Tmux key/mouse mappings config
# vim: set ft=tmux:

# Note on the parsing syntax of { braces } (More info in `PARSING SYNTAX` in `man 1 tmux`).
#
# Braces are like single quotes on steroid, that can span multiple lines and can be nested.
# Note that text inside { braces } is taken literally without any replacements. Newlines are also taken literally, and the actual string may look like `
#
#     bind x if-shell "true" {
#         if-shell "true" {
#             display 'hey, some $weird {chars}!'
#         }
#     }
#
# Is similar to:
#
#     bind x if-shell "true" '{\n    if-shell "true" \'{\n        display \\\'hey, some $weird {chars}!\\\'\n    }\'\n}'

# ---

set-option -g mode-keys vi # for copy mode
set-option -g status-keys vi # for lists and cmd prompt

# Allow multiple commands to be entered without pressing the prefix-key
# again in the specified time milliseconds (the default is 500).
# A key is allowed to repeat when it is bound with `bind-key -r`.
set -g repeat-time 1000 # 1 sec

# ---

bind-key r source-file ~/.tmux.conf \; display-message "Config ~/.tmux.conf reloaded"

# <prefix>c for new window after last one (default keybinding)
# <prefix>C for new window next to current window
bind-key C new-window -a

# In addition to n/p, C-n/C-p are easier to type after C-b prefix.
bind-key -r C-n next-window
bind-key -r C-p previous-window
# Move window
bind-key -r C-M-n swap-window -d -t +1
bind-key -r C-M-p swap-window -d -t -1

bind-key -r C-h select-pane -L \; display-pane -N
bind-key -r C-j select-pane -D \; display-pane -N
bind-key -r C-k select-pane -U \; display-pane -N
bind-key -r C-l select-pane -R \; display-pane -N
bind-key -r bspace select-pane -L \; display-pane -N # When mapping C-h has no effect
# Unbind the default h/j/k/l binds, to ensure I can immediately start typing
# after changing pane.
unbind h
unbind j
unbind k
unbind l

bind-key -r C-o select-pane -t :.+ \; display-pane -N
bind-key -r o   select-pane -t :.+ \; display-pane -N

# NOTE: key-repeat is NOT enabled for these, to ensure I can switch to a pane,
# and immediately after open the CtrlSpace panel in neovim.
bind-key C-space last-pane \; display-pane -N
bind-key space   last-pane \; display-pane -N

# Swap pane (only up/down available, it uses the numerical IDs of the panes)
bind -r M-J swap-pane -D
bind -r M-K swap-pane -U
bind -r M-s if -F "#{pane_marked_set}" {
  swap-pane
} {
  display-message "No marked pane, no idea which pane to swap with"
}

# Enter the prefix-prefix key table with C-b C-b!
bind C-b  switch-client -T prefix-prefix
bind -T prefix-prefix ?    list-keys -T prefix-prefix
bind -T prefix-prefix C    new-window -a -c "#{pane_current_path}"
bind -T prefix-prefix '"'  split-window -c "#{pane_current_path}"
bind -T prefix-prefix %    split-window -h -c "#{pane_current_path}"

# Select a session/window/pane, same as the default, but sorted last used first
bind-key s choose-tree -Zsw -O time

bind-key N command-prompt -p "New session name:" "new-session -s '%%'"

# Open a temporary shell in a popup:
# - on bottom of current window
# - in same directory as active pane
# NOTE: This is not a full pane, tmux keybinds doesn't work there
# -> so it's for quick commands only and then you close it to be able to use the rest of tmux.
bind C-y popup -E -y "S" -h "40%" -d "#{pane_current_path}" zsh

# Switch to pane which has the given PID (not exactly, see NOTE)
# Inspired by: https://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html
#
# Basically:
# - ask the PID (available as %% afterward)
# - use ps to show the env of process with PID, find the var TMUX_PANE
# - use it to switch to pane
#
# NOTE: the original code only switched to the correct session, I wrote a little script
#       to switch to the exact pane from its id.
bind-key P command-prompt -p "Switch to pane with pid:" "run-shell 'pane_id=\$(ps eww %% | sed \"1d; s/^.*TMUX_PANE=//;s/ .*//\"); [[ -n \$pane_id ]] && ~/.dot/bin/tmux-goto-pane-id \$pane_id || tmux display-message \"could not find pid\"'"

bind-key M-- select-layout even-horizontal # most common layout for me (pane1 | pane2)
bind-key M-| select-layout even-vertical # NOTE: M-| does not trigger currently..
bind-key M-= select-layout # re-apply current layout (to equalize if needed)

# -----------------------------------------------------------
# Copy mode key bindings (in addition to default ones)

# Copy the selection to tmux clipboard
bind-key -T copy-mode M-c send -X copy-selection \; display-message "Copied to tmux clipboard"
bind-key -T copy-mode-vi M-c send -X copy-selection \; display-message "Copied to tmux clipboard"

# Copy the selection to system clipboard
bind-key -T copy-mode M-C send -X copy-pipe "cli-clipboard-provider copy-to osc52" \; display-message "Copied to system clipboard"
bind-key -T copy-mode-vi M-C send -X copy-pipe "cli-clipboard-provider copy-to osc52" \; display-message "Copied to system clipboard"

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection
bind-key -T copy-mode-vi r send -X rectangle-toggle

# Paste the top buffer directly (from prefix and copy-mode-vi tables)
# (already exist in normal mode, this is a new default of tmux 3.2a)
bind -T copy-mode-vi MouseDown2Pane select-pane -t= \; send -X cancel \; paste -p
bind -T copy-mode-vi M-v send -X cancel \; paste -p
bind M-v paste -p
# Same, using mouse middle click
bind -T copy-mode-vi MouseDown2Pane select-pane -t= \; send -X cancel \; paste -p
# NOTE: The binding already exist in root table, this is a new default of tmux 3.2a

# -----------------------------------------------------------
# Mouse bindings (in addition to default ones)

# Disable the default right-click menu on the pane
unbind-key -T copy-mode-vi MouseDown3Pane
unbind-key -T root MouseDown3Pane
# NOTE: For some reason I need to disable it in 'root' to avoid have it in 'copy-mode-vi'..
#   -> Some keys fallback to other key tables?

# START OF CONFIG FOR Disable "mouse release exits copy mode"
# Inspired from https://github.com/tmux/tmux/issues/140#issuecomment-474341833

# disable "release mouse drag to copy and exit copy-mode", ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send -X clear-selection

# Changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
bind-key -n MouseDrag1Pane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  copy-mode -eM
}

# Make double and triple click work outside of copy mode
# Stolen from https://github.com/lencioni/dotfiles/commit/f8fc959c70a3e3d4772caa5b81421e745a328389
# NOTE: `-t=` targets the pane under the mouse.
bind-key -T root DoubleClick1Pane if -t= -F "#{alternate_on}" {
  send -M
} {
  copy-mode -t= ; send -X select-word
}
bind-key -T root TripleClick1Pane if -t= -F "#{alternate_on}" {
  send -M
} {
  copy-mode -t= ; send -X select-line
}

# Ensure that selecting text in copy mode does NOT auto-copy it
# (this is unfortunately the new default in version 3.2a)
bind -T copy-mode-vi DoubleClick1Pane send -X select-word
bind -T copy-mode-vi TripleClick1Pane send -X select-line

# END OF CONFIG FOR Disable "mouse release exits copy mode"

# Make double right click exit copy-mode (so I don't have to reach 'q' every time!)
bind-key -T copy-mode-vi DoubleClick3Pane send -X cancel
# NOTE: When tmux implements it, normal right click could be used to extend the selection.
#
#   There are no extend-selection actions yet. There is append-selection, but it does
#   not do what I want (I want extend existing non-copied selection, not add separate
#   thing to the previously copied selection)
#
#   It _might_ be possible to simulate extend-selection by getting current cursor pos,
#   mouse pos and send necessary cursor-{up,down,left,right} commands to move the
#   selection cursor to the mouse pos..

# Override the default Wheel{Up,Down}Pane bindings to add scrolling emulation when on the
# alternate screen, by sending 3 Up/Down keys.
bind-key -T root WheelUpPane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  if -Ft= "#{alternate_on}" { send -t= Up Up Up } { copy-mode -et= }
}
bind-key -T root WheelDownPane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  if -Ft= "#{alternate_on}" { send -t= Down Down Down } {}
}
