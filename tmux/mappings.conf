# -----------------------------------------------------------
# --- Key/Mouse mappings config
# NOTE: use `tmux list-keys` to show active keys/mouse bindings!

# ---

set -g mode-keys vi # for copy mode
set -g status-keys vi # for lists and cmd prompt

# Allow multiple commands to be entered without pressing the prefix-key
# again in the specified time milliseconds (the default is 500).
# A key is allowed to repeat when it is bound with `bind -r`.
set -g repeat-time 2000 # 2 sec
# NOTE: Here, we're trying to use a high repeat-time (> 1s), which shouldn't be too annoying
#       as when we are in repeat mode, an unknown-by-tmux key will cancel the repeat mode and
#       insert that key :)

# ---

# IDEA: use C-M-Space for prefix? (leaves C-Space as global leader in neovim)
#   This is a nice prefix:
#   > easy to do with 1 or 2 hands on any keyboard (laptop/split-keyboard)
#   > still using C- as modifier, so all my other keybinds are the same
#   > still using a right-hand char (I never use Space using left-hand)
#   => This is a clear win when I move more to the moonlander keyboard,
#      as B moves to right hand there!
#set prefix C-M-Space
# In the meantime, try it as an additional prefix key
bind -T root C-M-Space      switch-client -T prefix
# NOTE: Nearby pane navigation with hjkl is a bit annoying though:
#   - I need to perfectly time: Ctrl-Alt-Space (release Alt) Ctrl+hjkl
#   - If I don't release Alt at the right moment, I'm creating new panes directionally..
#     (and I DON'T want to change those bindings...)
#
# IDEA: Another solution _could_ be to use Ctrl-Space + Ctrl-hjkl but only when main program in NOT alt-screen or it is NOT Neovim.
#  and in Neovim, setup Ctrl-Space + Ctrl-hjkl to switch to tmux pane directionally
#  => Neovim keeps the ownership of Ctrl-Space keybind

# Show help for all keys in prefix key table
bind ? list-keys -T prefix

# Allow 'Espace' & 'C-q' to cancel current prefix repeat-mode
bind -r C-q    switch-client -Troot
bind -r Escape switch-client -Troot

set -g @xdg_config_home "#{?#{XDG_CONFIG_HOME},#{XDG_CONFIG_HOME},#{HOME}/.config}"
set -g @config_entrypoint "#{?#{TMUX_CONFIG_ENTRYPOINT},#{TMUX_CONFIG_ENTRYPOINT},#{E:@xdg_config_home}/tmux/tmux.conf}"
bind C-r   source -F "#{E:@config_entrypoint}"
bind C-M-r source -F "#{E:@config_entrypoint}"

# -- Zoom bindings
# Quick zoom toggle: `C-b C-z`
# (not repeatable, see note below)
bind    C-z resize-pane -Z
# 'repeat'-enabled zoom toggle
# NOTE: cannot use 'z' or 'C-z' in repeat mode
# because it breaks flow 'focus and send z or C-z'
bind -r C-M-z resize-pane -Z
# Also on <C-m> for 'maximize'
bind -r C-m   resize-pane -Z
bind -r C-M-m resize-pane -Z

# -- Window keys (goto, create, move)

# Goto window
# NOTE: Not binding it to Alt-a/z and Alt-A/Z to leave these immediately
#       available for neovim, even in tmux's repeat mode.
unbind n ; unbind p # disable buildins
bind -r C-n next-window     \; display-pane -N
bind -r C-p previous-window \; display-pane -N

# Create window after last one
bind c new-window
# Create window after current one
bind C   new-window -a
# NOTE: cannot have 'repeat' for 'C-c', to not break flow 'focus then send C-c'
# IDEA: Would be nice to be able to allow repeat after 'C-c', but not enable 'C-c' binding when
#       repeat mode was enabled by another keybind before.
bind C-c new-window -a

# Move window (with Alt + goto keys or Shift + M-based goto keys)
bind -r C-M-n swap-window -d -t +1
bind -r C-M-p swap-window -d -t -1

# -- Pane keys in a window (goto create, move, arrange)
# Advanced actions in pane-mode key table
# NOTE: Cannot use C-p for the mode, it's used for goto previous window
#       And C-w can actually be a bit better for hand alternance (left-right-left-right..)
bind C-w switch-client -T pane-mode
bind -T pane-mode ?  list-keys -T pane-mode

# Quick pane navigation
bind -r C-h if -F "#{window_zoomed_flag}" { select-pane -Z -L } { select-pane -L ; display-pane -N }
bind -r C-j if -F "#{window_zoomed_flag}" { select-pane -Z -D } { select-pane -D ; display-pane -N }
bind -r C-k if -F "#{window_zoomed_flag}" { select-pane -Z -U } { select-pane -U ; display-pane -N }
bind -r C-l if -F "#{window_zoomed_flag}" { select-pane -Z -R } { select-pane -R ; display-pane -N }
# When mapping C-h has no effect
# bind -r bspace if -F "#{window_zoomed_flag}" { select-pane -Z -L } { select-pane -L ; display-pane -N }

# pane navigation in pane-mode
# NOTE: There's no check for window zoomed state, because I don't see a usecase to be in pane-mode
#       while having the window zoomed..
bind -r -T pane-mode C-h select-pane -L \; display-pane -N
bind -r -T pane-mode C-j select-pane -D \; display-pane -N
bind -r -T pane-mode C-k select-pane -U \; display-pane -N
bind -r -T pane-mode C-l select-pane -R \; display-pane -N

# Unbind the default h/j/k/l binds (which are 'repeat' enabled),
# to ensure I can immediately start typing after changing pane.
unbind h ; unbind j ; unbind k ; unbind l
unbind Left ; unbind Down ; unbind Up ; unbind Right

# note: not 'repeat' enabled, because flow 'focus then send space or open CtrlSpace (in nvim)'
bind space     if -F "#{window_zoomed_flag}" { last-pane -Z } { last-pane ; display-pane -N }
bind C-space   if -F "#{window_zoomed_flag}" { last-pane -Z } { last-pane ; display-pane -N }
bind C-M-space if -F "#{window_zoomed_flag}" { last-pane -Z } { last-pane ; display-pane -N }

# Spread panes evenly in the window
unbind E # disable builtin for that action
bind -r C-e select-layout -E
bind -r M-= select-layout -E
bind -r -T pane-mode C-e select-layout -E
bind -r -T pane-mode =   select-layout -E

# Pane splits (with Alt + goto keys)
unbind % ; unbind '"'
bind -r C-M-h  split-window -b -h
bind -r C-M-j  split-window    -v
bind -r C-M-k  split-window -b -v
bind -r C-M-l  split-window    -h
# Smart split
# ((pane_width / 3) > pane_height) ? split right : split down
set -g @smart_hv_split_condition "#{e|>:#{e|/:#{pane_width},3},#{pane_height}}"
bind -r M-c if -F "#{E:@smart_hv_split_condition}" { split-window -h } { split-window -v }

# Full window splits (of size ~'less-than-half')
bind -r -T pane-mode C-M-h  split-window -b -h -f -l 72
bind -r -T pane-mode C-M-j  split-window    -v -f -l 15
bind -r -T pane-mode C-M-k  split-window -b -v -f -l 15
bind -r -T pane-mode C-M-l  split-window    -h -f -l 72

# Swap pane if possible (with Shift-jk)
# (only up/down in the pane (numbered) list is available)
bind -r -T pane-mode J if -F "#{&&:#{pane_at_bottom},#{pane_at_right}}" {
  display-message "Cannot move pane down or right"
} {
  swap-pane -D
}
bind -r -T pane-mode K if -F "#{&&:#{pane_at_top},#{pane_at_left}}" {
  display-message "Cannot move pane up or left"
} {
  swap-pane -U
}
# Disable Shift-h/l (left/right) for better predictibility
# (because only up/down in the pane (numbered) list is really available..)
bind -r -T pane-mode H display-message "Action disabled for consistency, use K instead"
bind -r -T pane-mode L display-message "Action disabled for consistency, use J instead"
# Swap with marked pane if set (with Shift-s)
bind -r -T pane-mode M select-pane -m # toggle mark active pane
bind -r -T pane-mode S if -F "#{pane_marked_set}" {
  swap-pane ; select-pane -M # swap & clear pane mark
  display-pane -N
} {
  display-message "No marked pane, no idea which pane to swap with"
}
bind -r M-m select-pane -m # toggle mark active pane
# NOTE: cannot be 'repeated', to ensure I can _save_ buffer before prefix repeat rate timeouts
bind M-s if -F "#{pane_marked_set}" {
  # Swap current with marked pane (clear mark)
  swap-pane ; select-pane -M
} {
  # Swap last pane with current pane (stay at same location)
  #
  # The workflow is:
  # 1. Be on a pane S and wish to move it
  # 2. Then select the target pane T I want for pane S
  # 3. Trigger swap
  # 4. I end up on the pane S, at the position of old pane T
  swap-pane -d '-s{last}'
}
unbind C-o # disable builtin for rotating panes, I NEVER use that..

# -- Same directory mode (no repeat) (create only)
# To create panes/windows in the same directory as active pane
bind C-d   switch-client -T same-directory-mode
bind C-M-d switch-client -T same-directory-mode
bind -T same-directory-mode ?    list-keys -T same-directory-mode

# If we triggered 'same-directory-mode' by mistake, and wanted to send C-d, we can re-do it to send it!
# bind -T same-directory-mode C-d  send "C-d"
# (EDIT: This does't seem to happen often, and is actually annoying (can close pane..) when I 'C-d' by mistake)

# Window creations
bind -T same-directory-mode c    new-window    -c "#{pane_current_path}"
bind -T same-directory-mode C    new-window -a -c "#{pane_current_path}"
bind -T same-directory-mode C-c  new-window -a -c "#{pane_current_path}" # same as previous, let's try..
# Pane splits
bind -T same-directory-mode C-M-h  split-window -b -h -c "#{pane_current_path}"
bind -T same-directory-mode C-M-j  split-window    -v -c "#{pane_current_path}"
bind -T same-directory-mode C-M-k  split-window -b -v -c "#{pane_current_path}"
bind -T same-directory-mode C-M-l  split-window    -h -c "#{pane_current_path}"
# Smart split
bind -T same-directory-mode M-c    if -F "#{E:@smart_hv_split_condition}" {
  split-window -h -c "#{pane_current_path}"
} {
  split-window -v -c "#{pane_current_path}"
}

# -- Session keys (create, switch, operate)
bind C-s  switch-client -T session-mode
bind -T session-mode ?    list-keys -T session-mode

# Select a session/window/pane, same as the default but sorted 'last-used' first
bind s        choose-tree -Zsw -O time
bind -r C-M-s choose-tree -Zsw -O time
# Try with C-f base, someday I might repurpose C-M-s as session prefix ðŸ¤”
bind -r C-f   choose-tree -Zsw -O time
bind -r C-M-f choose-tree -Zsw -O time

# Set session CWD to 'pane_current_path' (C-b C-s C-s)
bind -T session-mode C-s   attach-session -c "#{pane_current_path}" \; display-message "Session CWD set to '#[fg=blue]#{s/#{HOME}/~/:pane_current_path}#[default]'"

# Create new session (C-b C-s C-c)
bind -T session-mode C-c   command-prompt -p "New session name:" { new-session -s '%%' }

# Rename current session
bind -T session-mode C-r   command-prompt -p "Rename session:" -I "#S" { rename-session -- '%%' }

# Swich to last session
bind -T session-mode C-space switch-client -Z -l

# Swich to next/prev session
bind -T session-mode C-n switch-client -Z -n
bind -T session-mode C-p switch-client -Z -p

# ---

# Show all builtin variables and their value
bind V   display-message -a

# Open a temporary shell in a popup:
# - on bottom of current window
# - in same directory as active pane
# NOTE: This is not a full pane, tmux keybinds doesn't work there
# -> so it's for quick commands only and then you close it to be able to use the rest of tmux.
bind C-t popup -E -y "S" -w "80%" -h "50%" -d "#{pane_current_path}" zsh

# Switch to pane which has the given PID (not exactly, see NOTE)
# Ref: https://jacob-walker.com/blog/taming-tmux-find-one-process-among-many-windows.html
#
# Basically:
# - ask the PID (available as %% afterward)
# - use ps to show the env of process with PID, find the var TMUX_PANE
# - use it to switch to pane
#
# NOTE: the original code only switched to the correct session, I wrote a little script
#       to switch to the exact pane from its id.
bind P command-prompt -p "Switch to pane with pid:" {
  run 'pane_id=$(ps eww %% | sed "1d; s/^.*TMUX_PANE=//;s/ .*//"); [[ -n $pane_id ]] && ~/.dot/bin/tmux-goto-pane-id $pane_id || tmux display-message "could not find pid"'
}

# Quality of life, C-z from copy mode, sends C-z to program in pane :)
# With C-z mapped in shell to 'fg' last program, this binding allows me to:
# 1. scroll (in copy mode) and/or select something with the mouse
# 2. copy it (in a tmux buffer)
# 3. C-z to go back to my last program to use the thing I just copied \o/
bind -T copy-mode-vi C-z send -X cancel \; send C-z

# Fast up/down in copy mode
bind -T copy-mode-vi J send -X page-down
bind -T copy-mode-vi K send -X page-up

# -----------------------------------------------------------
# Basic vim-like movements in every cli !!!!
#
# NOTE: All binds have repeat mode, to easily use multiple vim-everywhere keys to move around.
# NOTE: Once in vim-everywhere mode, all vim keys are prefixed with Alt to allow to easily move
#       around and immediately after, type some text (without having to escape from that vim mode).
#
# The key binds are isolated in a separate keytable, to ensure programs I could configure with a
# vim-mode do uses their own vim-mode when I quickely change pane and try to use vim-like keys I
# configured for that program.
# => This separate keytable is only for programs that I can't configure to have a vim-mode.
# Inspired from:
# * https://www.reddit.com/r/tmux/comments/6920do/til_custom_keytables_with_switchclient_t/
# * my own vim-like key bindings in zsh, fzf, and on Windows with AutoHotKey

# Enter vim-everywhere...
bind C-v switch-client -T vim-everywhere
bind -r -T vim-everywhere ?    list-keys -T vim-everywhere

# Char movement (h/j/k/l)
bind -r -T vim-everywhere M-h  send Left
bind -r -T vim-everywhere M-j  send Down
bind -r -T vim-everywhere M-k  send Up
bind -r -T vim-everywhere M-l  send Right

# Word movement (if the cli supports it)
bind -r -T vim-everywhere M-w  send C-Right
bind -r -T vim-everywhere M-b  send C-Left

# Begin/End of the line
bind -r -T vim-everywhere M-^  send Home
bind -r -T vim-everywhere M-$  send End

# Shortcut to paste from that mode (if I want to be fast, and the keytable is still active)
# See the other M-v bindings below for more info.
bind -r -T vim-everywhere M-v  paste -p

# -----------------------------------------------------------
# Copy mode key bindings (in addition to default ones)

# Cancel copy mode
bind -T copy-mode    i send -X cancel
bind -T copy-mode-vi i send -X cancel

# Copy the selection to tmux clipboard
bind -T copy-mode    M-c send -X copy-selection \; display-message "Copied to tmux clipboard"
bind -T copy-mode-vi M-c send -X copy-selection \; display-message "Copied to tmux clipboard"

# Copy the selection to system clipboard
bind -T copy-mode    M-C send -X copy-pipe "cli-clipboard-provider copy-to osc52" \; display-message "Copied to system clipboard"
bind -T copy-mode-vi M-C send -X copy-pipe "cli-clipboard-provider copy-to osc52" \; display-message "Copied to system clipboard"

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection
bind -T copy-mode-vi r send -X rectangle-toggle

# Paste the top buffer directly (from prefix and copy-mode-vi tables)
# (already exist in normal mode, this is a new default of tmux 3.2a)
bind -T copy-mode-vi MouseDown2Pane select-pane -t= \; send -X cancel \; paste -p
bind -T copy-mode-vi M-v                               send -X cancel \; paste -p
bind M-v paste -p

# Replace default choose-buffer binding to use bracketed-paste when available.
bind =  choose-buffer -Z { paste-buffer -p -b '%%' }

# -----------------------------------------------------------
# Mouse bindings (in addition to default ones)

# Disable the default right-click menu on the pane
unbind-key -T copy-mode-vi MouseDown3Pane
unbind-key -T root         MouseDown3Pane
# NOTE: For some reason I need to disable it in 'root' to avoid have it in 'copy-mode-vi'..
#   -> Some keys fallback to other key tables?

# START OF CONFIG FOR Disable "mouse release exits copy mode"
# Inspired from https://github.com/tmux/tmux/issues/140#issuecomment-474341833

# disable "release mouse drag to copy and exit copy-mode", ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind -T copy-mode-vi MouseDown1Pane select-pane\; send -X clear-selection

# Changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
bind -n MouseDrag1Pane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  copy-mode -eM
}

# FIXME: When scrolling while doing a selection (to select 2+ pages of text), when scrolling hits
#        the bottom, it exits copy mode. :/
#   => I think I want to only exist copy mode if there is no selection in progress
#   BUT can I distinguish between me actively doing a selection, and me scrolling while a
#       selection has been made (but I'm NOT holding mouse click to extend it)

# Make double and triple click work outside of copy mode
# Stolen from https://github.com/lencioni/dotfiles/commit/f8fc959c70a3e3d4772caa5b81421e745a328389
# NOTE: `-t=` targets the pane under the mouse.
bind -T root DoubleClick1Pane if -t= -F "#{mouse_any_flag}" {
  send -M
} {
  copy-mode -t= ; send -X select-word
}
bind -T root TripleClick1Pane if -t= -F "#{mouse_any_flag}" {
  send -M
} {
  copy-mode -t= ; send -X select-line
}

# Ensure that selecting text in copy mode does NOT auto-copy it
# (this was unfortunately the new default in version 3.2a)
bind -T copy-mode-vi DoubleClick1Pane send -X select-word
bind -T copy-mode-vi TripleClick1Pane send -X select-line

# END OF CONFIG FOR Disable "mouse release exits copy mode"

# Make double right click exit copy-mode (so I don't have to reach 'q' every time!)
bind -T copy-mode-vi DoubleClick3Pane send -X cancel
# NOTE: When tmux implements it, normal right click could be used to extend the selection.
#
#   There are no extend-selection actions yet. There is append-selection, but it does
#   not do what I want (I want extend existing non-copied selection, not add separate
#   thing to the previously copied selection)
#
#   It _might_ be possible to simulate extend-selection by getting current cursor pos,
#   mouse pos and send necessary cursor-{up,down,left,right} commands to move the
#   selection cursor to the mouse pos..

# Override the default Wheel{Up,Down}Pane bindings to add scrolling emulation when on the
# alternate screen, by sending 3 Up/Down keys.
bind -T root WheelUpPane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  if -Ft= "#{alternate_on}" { send -t= Up Up Up } { copy-mode -et= }
}
bind -T root WheelDownPane if -F -t= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send -M
} {
  if -Ft= "#{alternate_on}" { send -t= Down Down Down } {}
}

# Allow plain PageUp to enter copy mode, or passthrough the key on altscreen
bind -T root PageUp if -Ft= "#{alternate_on}" {
  send PageUp
} {
  copy-mode -u
}

# TREE-MODE mapping:
# NOTE: tree-mode isn't a special mode with special keytable..
#   => we need to replace the root binding when the tree-mode menu is visible
#   Ref: https://github.com/tmux/tmux/issues/2983#issuecomment-981533920
bind -T root C-j        if -F "#{==:#{pane_mode},tree-mode}" { send Enter } { send C-j }
bind -T root Space      if -F "#{==:#{pane_mode},tree-mode}" { send Enter } { send Space }
bind -T root -r C-Space if -F "#{==:#{pane_mode},tree-mode}" { send Enter } { send C-Space }
# quick flow when in repeat key state
bind -T root -r M-h     if -F "#{==:#{pane_mode},tree-mode}" { send j }     { send M-h }
bind -T root -r M-j     if -F "#{==:#{pane_mode},tree-mode}" { send j }     { send M-j }
bind -T root -r M-k     if -F "#{==:#{pane_mode},tree-mode}" { send k }     { send M-k }
bind -T root -r M-l     if -F "#{==:#{pane_mode},tree-mode}" { send k }     { send M-l }
# note: to make the following binding to work from a Windows host,
#   we need to ensure Alt-space doesn't open the menubar.
bind -T root -r M-Space if -F "#{==:#{pane_mode},tree-mode}" { send Enter } { send M-Space }

display-message "Tmux mappings reloaded!"
# vim: set ft=tmux:
