# Tmux config file
# vim: set ft=tmux:

# TODO: split options by behavior / appearence / statusline-config

# WARN: default cmd will need to be configurable ðŸ‘€
#   (or at least, skipped in the config)
set -g default-command "env -u SHLVL $HOME/.nix-profile/bin/zsh"

# Mouse setup
set -g mouse on

# Setup host terminal knowledge to assume many features are supported.
# (Assuming Wezterm, which basically supports all-the-things \o/)
#
# Add common features
set -sa terminal-features ",xterm-256color:256,RGB,hyperlinks"
# Add uncommon features:
# - usstyle: host term supports underline colors & styles
# - overline: host term supports line over text
# - sync: host term supports synchronized updates
set -sa terminal-features ",xterm-256color:usstyle,overline,sixel,sync"
# (NOTE: -s: server option ; -a: append)
# DEBUG: Check effective terminal features with:
#   tmux display -p '#{client_termfeatures}'
# (note: might need to detach/re-attach to update terminal-features after config reload)

# Ensure the system clipbaord is never set by tmux when setting the tmux
# clipboard.
#
# => I want to completely separate tmux/system clipboard.
# When setting the system clipboard, I always bypass tmux anyway.
set -g set-clipboard off

# Disable tmux's auto window renaming
set -g allow-rename off

# Set timeout escape for tmux, for proper nvim support
set -sg escape-time 10

# Set TERM for proper colors
set -g default-terminal "tmux-256color"

# Request focus events from the terminal if supported and pass them through to apps
set -g focus-events on

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber all windows when one is killed
set -g renumber-windows on

# In tmux copy mode, mouse word selection uses these separators
set -g word-separators " \t\n{}[]()\"'`=,;:@"

# Set history size (default is ~2000)
set -g history-limit 10000

# Do not detach on session destroy, switch to another one
set -g detach-on-destroy off

# Config for the display-pane overlay
set -g display-panes-active-colour red
set -g display-panes-colour black # dark color, to now draw attention
set -g display-panes-time 1000 # 1s

# Set duration for `display-message`
set -g display-time 2000 # 2s

# Pane border
set -g pane-border-lines heavy
set -g pane-border-style fg=colour239
set -g pane-active-border-style fg=colour37

# Status bar
set -g status-justify absolute-centre
set -g status-left-length 60
set -g status-right-length 60

# -- Window-list status formatting
#
# NOTE: use `tmux show-options -wA` to see all 'window-status-*' values
# NOTE: some default values for these options:
#   window-status-format "#I:#W#{?window_flags,#{window_flags}, }"
#   window-status-current-format is the same as window-status-format
#   window-status-separator " "
#   ~almost all *-style are set to "default"
#   status-style "bg=green,fg=black"

set -g window-status-current-format " #I #W#{?window_flags,#{window_flags}, } "
set -g window-status-format " #I #W#{?window_flags,#{window_flags}, } "
set -g window-status-separator " "

set -g window-status-style fg=terminal,bg=colour23  # inactive windows
set -g window-status-current-style bg=colour25,fg=white,bold  # active window

set -g status-style bg=colour30,fg=black

# message bar, for display or when in prompt's insert mode
set -g message-style bg=colour236,fg=colour214
# message bar, when in prompt's command mode (when vi keys enabled)
set -g message-command-style bg=colour236,fg=colour70

# -- Define a few user options, to refactor status' format string.
#
# NOTE: inside #{?cond,branch1,branch2} branches, we need to escape ',' with '#,'

# Mode indicator, showing the current mode if any
# Inspired from https://stackoverflow.com/a/15308651/5655255
set -g @mode_indicator "#{?pane_in_mode,#[fg=black bg=yellow] #{pane_mode} #[default],}"

# Key table indicator, shown when a prefix key table is active
# NOTE: this whole thing is equivalent to:
# + if not client_prefix: return
# | if @table_b_prefix_cond:
# |     show(@table_b_prefix_styled)
# | elseif @table_vim_everywhere_cond:
# |     show(@table_vim_everywhere_styled)
# | else:
# +     show(@table_default_styled)
set -g @table_b_prefix_cond "#{==:#{client_key_table},prefix}"
set -g @table_b_prefix_styled "#[fg=red bg=black] prefix #[default]"
set -g @table_vim_everywhere_cond "#{==:#{client_key_table},vim-everywhere}"
set -g @table_vim_everywhere_styled "#[fg=green bold bg=black] [! VIM EVERYWHERE !] #[default]"
set -g @table_default_styled "#[fg=white bg=black] (#{client_key_table}) #[default]"
set -g @table_if2 "#{?#{E:@table_vim_everywhere_cond},#{E:@table_vim_everywhere_styled},#{E:@table_default_styled}}"
set -g @table_if1 "#{?#{E:@table_b_prefix_cond},#{E:@table_b_prefix_styled},#{E:@table_if2}}"
# NOTE: `client_prefix` is true when a non-root key table is active
set -g @key_table_indicator "#{?client_prefix,#{E:@table_if1},}"

# Zoomed indicator, shown when a pane is zoomed in the current window
set -g @zoom_indicator "#{?window_zoomed_flag,#[fg=black bg=yellow] ZOOMED #[default],}"

set -g @session_styled "#[bg=colour166,fg=white,bold]  #{session_name}  #[default]"

set -g @time_format "%H:%M"
set -g @date_format "%d-%b(%m)"
set -g @date_time_styled "#[bg=colour235 fg=colour248] #{T:@time_format} #[bg=colour237] #{T:@date_format} #[default]"

# Put everything together! E:@variable means that the content of @variable will be processed
# for formatting (instead of just showing '@variable').
set -g status-left "#{E:@session_styled} #{E:@mode_indicator}#{E:@key_table_indicator}"
set -g status-right "#{E:@zoom_indicator}#{E:@date_time_styled}"
