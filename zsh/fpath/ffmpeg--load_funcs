#!/usr/bin/env zsh

# Expose config vars when sourcing the file, to be easily tab-completable
FFMPEG_DRY_RUN=${FFMPEG_DRY_RUN:-}
FFMPEG_LOGLEVEL=${FFMPEG_LOGLEVEL:-warning}
FFMPEG_VIDEO_SIZE=${FFMPEG_VIDEO_SIZE:-}
FFMPEG_VIDEO_AVG_BITRATE=${FFMPEG_VIDEO_AVG_BITRATE:-}
FFMPEG_THREADS=${FFMPEG_THREADS:-}
FFMPEG_SKIP_EXISTING_OUTPUTS=${FFMPEG_SKIP_EXISTING_OUTPUTS:-}
FFMPEG_VIDEO_EXT=${FFMPEG_VIDEO_EXT:-mkv}
FFMPEG_AUDIO_EXT=${FFMPEG_AUDIO_EXT:-m4a}

# NOTE: Would be nice if FFMPEG_SKIP_EXISTING_OUTPUTS was a size like `300MB`, that would allow to
# skip files of at least that size (to be able to cancel a run, and restart it without having to
# delete the last in-progress)
# OR: go the other route, name the in-progress files in a specific way, and rename to the final file
# when finished..

function ffmpeg::show_config()
{
  _ffmpeg::show_single_config FFMPEG_DRY_RUN "$FFMPEG_DRY_RUN"
  _ffmpeg::show_single_config FFMPEG_LOGLEVEL "$FFMPEG_LOGLEVEL" warning
  _ffmpeg::show_single_config FFMPEG_VIDEO_SIZE "$FFMPEG_VIDEO_SIZE"
  _ffmpeg::show_single_config FFMPEG_VIDEO_AVG_BITRATE "$FFMPEG_VIDEO_AVG_BITRATE"
  _ffmpeg::show_single_config FFMPEG_THREADS "$FFMPEG_THREADS"
  _ffmpeg::show_single_config FFMPEG_SKIP_EXISTING_OUTPUTS "$FFMPEG_SKIP_EXISTING_OUTPUTS"
  _ffmpeg::show_single_config FFMPEG_VIDEO_EXT "$FFMPEG_VIDEO_EXT" mkv
  _ffmpeg::show_single_config FFMPEG_AUDIO_EXT "$FFMPEG_AUDIO_EXT" m4a
}

function _ffmpeg::show_single_config()
{
  local name="$1"
  local value="$2"
  local default="${3:-}"
  if [[ -z "$value" ]]; then
    echo "  $name: (not set)"
  elif [[ "$value" == "$default" ]]; then
    echo "  $name: $value (default)"
  else
    echo "+ $name: $value"
  fi
}

function _ffmpeg::quote_arg_if_needed
{
  local tmp_quotes=$(printf "%q" "$1")
  if [[ "$tmp_quotes" =~ '\\' ]] || [[ "$tmp_quotes" =~ "'" ]]; then
    # Ref: https://unix.stackexchange.com/a/445477/159811
    printf "%s" "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
  else
    printf "%s" "$1"
  fi
}

function _ffmpeg::display_and_run
{
  echo "--> Going to run:"
  # Print command and args, with quotes if needed
  for arg in "$@"; do
    _ffmpeg::quote_arg_if_needed "$arg"
    printf " "
  done
  echo

  if [[ -n "${FFMPEG_DRY_RUN:-}" ]]; then
    echo "==> \$FFMPEG_DRY_RUN is set, nothing to run"
  else
    echo "==> Now running..."
    echo
    "$@"
  fi
}

function _ffmpeg::check_need_skip()
{
  [[ -n "$FFMPEG_SKIP_EXISTING_OUTPUTS" ]] || return 1 # should NOT skip

  local output_path="$1"
  if [[ -f "$output_path" ]]; then
    echo "==> \$FFMPEG_SKIP_EXISTING_OUTPUTS is set, and output path already exists, skipping"
    echo
    return 0 # should skip
  else
    return 1 # should NOT skip
  fi
}

function _ffmpeg::doing_action_from_to()
{
  local action="$1"
  local from="$2"
  local to="$3"

  echo
  echo "::: $action..."
  echo "    ├ From: '$from'"
  echo "    └── To: '$to'"
  echo
}

function ffmpeg::extract-audio
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::extract-audio <input_path> [<format>]"
    echo "  <format> defaults to '$FFMPEG_AUDIO_EXT'"
    return 1
  fi

  local input_path="$1"
  local format="${2:-$FFMPEG_AUDIO_EXT}"
  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension
  local output_path="./$input_filename_no_ext.$format"

  _ffmpeg::doing_action_from_to "Extracting audio" "$input_path" "$output_path"
  _ffmpeg::check_need_skip "$output_path" && return 0

  # -i    input file
  # -vn   disable video
  ffmpeg -hide_banner -i "$input_path" -vn "$output_path"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo "::: Audio extracted to '$output_path'"
  else
    echo "!!! Failed to extract audio from '$input_path'"
  fi
  return $ret
}

function ffmpeg::extract-audio::rm_source
{
  local input_path="$1"

  ffmpeg::extract-audio "${@}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo "::: Deleting source '$input_path'..."
  else
    return $ret
  fi

  command rm "$input_path"
  ret=$?
  [[ $ret == 0 ]] && echo " >> Done!"
  return $ret
}

function ffmpeg::transcode-movie::single-file
{
  if [[ "$1" == "--verbose" ]] || [[ "$1" == "-v" ]]; then
    shift
    >&2 echo "-> Verbose requested, using loglevel 'info' (was: '$FFMPEG_LOGLEVEL')"
    local FFMPEG_LOGLEVEL=info # local, to only affect this function
  fi
  local input_path="$1"
  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension

  local transcode_suffix && {
    [[ -n "${FFMPEG_VIDEO_SIZE:-}" ]] && transcode_suffix+="-sz(${FFMPEG_VIDEO_SIZE})"
    [[ -n "${FFMPEG_VIDEO_AVG_BITRATE}" ]] && transcode_suffix+="-v(${FFMPEG_VIDEO_AVG_BITRATE})"
  }
  local rename_id="transcoded" && {
    [[ -n "$transcode_suffix" ]] && {
      # $transcode_suffix looks like '-foo', remove '-' prefix
      rename_id+="[${transcode_suffix#-}]"
    }
  }
  local output_path="./${input_filename_no_ext}.$rename_id.${FFMPEG_VIDEO_EXT}"

  _ffmpeg::doing_action_from_to "Transcoding file" "$input_path" "$output_path"
  _ffmpeg::check_need_skip "$output_path" && return 0

  local cmd=(ffmpeg -hide_banner)
  if [[ -n "$FFMPEG_LOGLEVEL" ]]; then
    # Good ones are: info (the default), warning (⚠), error (can recover), fatal (cannot recover)
    cmd+=(-loglevel "$FFMPEG_LOGLEVEL" -stats)
  fi
  # input
  cmd+=(-i "$input_path")
  # output config
  cmd+=(-map 0:V) # video first
  cmd+=(-map 0:a) # then all audios
  cmd+=(-map "0:s?") # then all subtitles (if any)
  cmd+=(-framerate 30) # just enough fps
  cmd+=(-preset slow) # good compression
  [[ -n "${FFMPEG_VIDEO_SIZE:-}" ]] && cmd+=(-s "$FFMPEG_VIDEO_SIZE")
  if [[ -n "${FFMPEG_VIDEO_AVG_BITRATE:-}" ]]; then
    # Set average bitrate & maxrate allowed
    # NOTE: '-maxrate' needs '-bufsize' to be set.
    #   We don't set it explicitely because I have no idea what to put, and the h264 encoder
    #   (the default video encoding for mkv files) does seems to set it by itself.
    cmd+=(-b:v "$FFMPEG_VIDEO_AVG_BITRATE" -maxrate:v "$FFMPEG_VIDEO_AVG_BITRATE")
  fi
  cmd+=(-c:a aac -maxrate:a 512k) # best quality & widely supported format
  cmd+=(-threads "${FFMPEG_THREADS:-auto}") # use this to limit CPU usage
  # output
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "::: File transcoded -> '$output_path'"
    echo
  fi
  return $ret
}

function ffmpeg::transcode-movie--low-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--low-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # low resolution (nhd <=> 640x360), enough for usual tv shows
    if ! FFMPEG_VIDEO_SIZE=nhd FFMPEG_VIDEO_AVG_BITRATE=400k ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::transcode-movie--med-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--med-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # medium resolution (qhd <=> 960x540), enough for movies or med qual tv shows
    if ! FFMPEG_VIDEO_SIZE=qhd FFMPEG_VIDEO_AVG_BITRATE=700k ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::transcode-movie--high720-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--high720-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # high (720p) resolution (hd720 <=> 1280x720), better qual for movies
    if ! FFMPEG_VIDEO_SIZE=hd720 FFMPEG_VIDEO_AVG_BITRATE=1M ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::take-sample
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::take-sample <file> [<duration=60>]"
    echo "       ffmpeg::take-sample <file> <end>"
    echo "       ffmpeg::take-sample <file> <start> <end>"
    echo "  <duration> & <start> & <end> are in seconds or [HH:]MM:SS"
    echo "  Not giving <start> is like taking a sample of the <file>."
    return 1
  fi

  local input_path="$1"
  local start _end
  if [[ -z "$2" ]]; then
    start=0
    _end=60 # 1min
  elif [[ -z "$3" ]]; then
    start=0
    _end="$2"
  else
    start="$2"
    _end="$3"
  fi

  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension
  local input_ext="${input_filename##*.}" # remove everything until last '.'
  local output_path="./${input_filename_no_ext}.sample-${start}-${_end}.${input_ext}"

  _ffmpeg::doing_action_from_to "Taking sample" "$input_path" "$output_path"
  _ffmpeg::check_need_skip "$output_path" && return 0

  local cmd=(ffmpeg -hide_banner)
  if [[ -n "$FFMPEG_LOGLEVEL" ]]; then
    # Good ones are: warning (⚠), error (can recover), fatal (cannot recover)
    cmd+=(-loglevel "$FFMPEG_LOGLEVEL" -stats)
  fi
  cmd+=(-ss "$start")
  cmd+=(-to "$_end")
  cmd+=(-i "$input_path")
  cmd+=(-map 0 -c copy) # copy every input streams
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "::: File sample cut -> '$output_path'"
    echo
  fi
  return $ret
}

function ffmpeg::keep-only-subs
{
  if [[ $# == 0 || $# == 1 ]]; then
    echo "Usage: ffmpeg::keep-only-subs <file> <lang1> [<lang2>...]"
    echo "  Keep only the subtitles with the given language codes."
    return 1
  fi

  local input_path="$1"; shift
  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension
  local input_ext="${input_filename##*.}" # remove everything until last '.'
  local langs=() langs_str
  for lang in "$@"; do
    langs+="$lang"
    langs_str+="$lang-"
  done
  langs_str="${langs_str[1,-2]}" # remove last '-'
  local output_path="./$input_filename_no_ext.only-subs($langs_str).$input_ext"

  _ffmpeg::doing_action_from_to "Keeping only subtitles ($langs_str)" "$input_path" "$output_path"
  _ffmpeg::check_need_skip "$output_path" && return 0

  local cmd=(ffmpeg -hide_banner)
  if [[ -n "$FFMPEG_LOGLEVEL" ]]; then
    # Good ones are: warning (⚠), error (can recover), fatal (cannot recover)
    cmd+=(-loglevel "$FFMPEG_LOGLEVEL" -stats)
  fi
  cmd+=(-i "$input_path") # input
  cmd+=(-c copy)
  cmd+=(-map 0:V -map 0:a) # video, then all audios
  # add subtitles of the wanted languages
  for lang in "${langs[@]}"; do
    # '0:s' for subtitles streams
    # and with additional specifier 'm:language:<lang>'
    # to only match subtitles with metadata of <lang>
    cmd+=(-map "0:s:m:language:$lang?")
  done
  # output
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "::: File with only subs (${langs_str}) -> '$output_path'"
    echo
  fi
  return $ret
}

function ffprobe::show-top-level
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffprobe::show-top-level <files>..."
    echo "  Show top-level informations (streams, duration, ..) for the given files"
    return 1
  fi

  for input_path in "$@"; do
    echo "Main media info for '$input_path'"
    ffprobe -hide_banner "$input_path" 2>&1 | grep '^  \w'
    # Top level lines are prefixed by 2 spaces.
    echo
  done
}

# This function only needs to exist, when I call it, this file
# will get executed and the helper functions will be in scope.
function ffmpeg::load_funcs
{
  echo "Helper functions already loaded!"
}
echo "Helper functions loaded!"
