#!/usr/bin/env zsh

FFMPEG_DRY_RUN=${FFMPEG_DRY_RUN:-}

function _ffmpeg::quote_arg_if_needed
{
  local tmp_quotes=$(printf "%q" "$1")
  if [[ "$tmp_quotes" =~ '\\' ]] || [[ "$tmp_quotes" =~ "'" ]]; then
    # Ref: https://unix.stackexchange.com/a/445477/159811
    printf "%s" "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
  else
    printf "%s" "$1"
  fi
}

function _ffmpeg::display_and_run
{
  echo "--> Going to run:"
  # Print command and args, with quotes if needed
  for arg in "$@"; do
    _ffmpeg::quote_arg_if_needed "$arg"
    printf " "
  done
  echo

  if [[ -n "${FFMPEG_DRY_RUN:-}" ]]; then
    echo "--> \$FFMPEG_DRY_RUN is set, nothing to run"
  else
    echo "--> Now running..."
    echo
    "$@"
  fi
}

function ffmpeg::extract-audio
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::extract-audio <filename> [<format>]"
    echo "  <format> defaults to m4a"
    return 1
  fi

  local filename="$1"
  local format="${2:-m4a}"
  local target_filename="${filename}.${format}"

  echo ">>> Extracting audio from '$filename'..."

  # -i    input file
  # -vn   disable video
  ffmpeg -hide_banner -i "$filename" -vn "$target_filename"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo " >> Audio extracted to '$target_filename'."
  else
    echo " >> Audio extract from '$filename' failed."
  fi
  return $ret
}

function ffmpeg::extract-audio::rm_source
{
  local filename="$1"

  ffmpeg::extract-audio "${@}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo ">>> Deleting source '$filename'..."
  else
    return $ret
  fi

  command rm "$filename"
  ret=$?
  [[ $ret == 0 ]] && echo " >> Done!"
  return $ret
}

function ffmpeg::transcode-movie::single-file
{
  local input_path="$1"
  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension

  if [[ -n "${FFMPEG_VIDEO_SIZE:-}" ]]; then
    local output_path="${input_filename_no_ext}.transcoded-${FFMPEG_VIDEO_SIZE}.mkv"
  else
    local output_path="${input_filename_no_ext}.transcoded.mkv"
  fi

  echo
  echo "--- Transcoding file -> '$output_path'"
  echo

  local cmd=(ffmpeg -hide_banner)
  # input
  cmd+=(-i "$input_path")
  # output config
  cmd+=(-map 0:V) # video first
  cmd+=(-map 0:a) # then all audios
  cmd+=(-map "0:s?") # then all subtitles (if any)
  cmd+=(-framerate 30) # just enough fps
  cmd+=(-preset slow) # good compression
  [[ -n "${FFMPEG_VIDEO_SIZE:-}" ]] && cmd+=(-s "$FFMPEG_VIDEO_SIZE")
  if [[ -n "${FFMPEG_VIDEO_AVG_BITRATE:-}" ]]; then
    # Set average bitrate & maxrate allowed
    # NOTE: '-maxrate' needs '-bufsize' to be set.
    #   We don't set it explicitely because I have no idea what to put, and the h264 encoder
    #   (the default video encoding for mkv files) does seems to set it by itself.
    cmd+=(-b:v "$FFMPEG_VIDEO_AVG_BITRATE" -maxrate:v "$FFMPEG_VIDEO_AVG_BITRATE")
  fi
  cmd+=(-c:a aac -maxrate:a 512k) # best quality & widely supported format
  cmd+=(-threads "${FFMPEG_THREADS:-auto}") # use this to limit CPU usage
  # output
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "--- File transcoded -> '$output_path'"
    echo
  fi
  return $ret
}

function ffmpeg::transcode-movie--low-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--low-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # low resolution (nhd <=> 640x360), enough for usual tv shows
    if ! FFMPEG_VIDEO_SIZE=nhd FFMPEG_VIDEO_AVG_BITRATE=400k ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::transcode-movie--med-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--med-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # medium resolution (qhd <=> 960x540), enough for movies or high qual tv shows
    if ! FFMPEG_VIDEO_SIZE=qhd FFMPEG_VIDEO_AVG_BITRATE=700k ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::transcode-movie--high720-qual
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::transcode-movie--high720-qual <files>..."
    return 1
  fi

  for input_path in "${@}"; do
    # high (720p) resolution (hd720 <=> 1280x720), better qual for movies
    if ! FFMPEG_VIDEO_SIZE=hd720 FFMPEG_VIDEO_AVG_BITRATE=1M ffmpeg::transcode-movie::single-file "$input_path"; then
      echo
      echo "... Movie transcode failed/cancelled ..."
      echo
      return 1
    fi
  done
}

function ffmpeg::take-sample
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffmpeg::take-sample <file> [<duration=60>]"
    echo "       ffmpeg::take-sample <file> <end>"
    echo "       ffmpeg::take-sample <file> <start> <end>"
    echo "  <duration> & <start> & <end> are in seconds or [HH:]MM:SS"
    echo "  Not giving <start> is like taking a sample of the <file>."
    return 1
  fi

  local input_path="$1"
  local start _end
  if [[ -z "$2" ]]; then
    start=0
    _end=60 # 1min
  elif [[ -z "$3" ]]; then
    start=0
    _end="$2"
  else
    start="$2"
    _end="$3"
  fi

  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension
  local input_ext="${input_filename##*.}" # remove everything until last '.'
  local output_path="${input_filename_no_ext}.sample-${start}-${_end}.${input_ext}"

  local cmd=(ffmpeg -hide_banner)
  cmd+=(-ss "$start")
  cmd+=(-to "$_end")
  cmd+=(-i "$input_path")
  cmd+=(-map 0 -c copy) # copy every input streams
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "--- File sample cut -> '$output_path'"
    echo
  fi
  return $ret
}

function ffmpeg::keep-only-subs
{
  if [[ $# == 0 || $# == 1 ]]; then
    echo "Usage: ffmpeg::keep-only-subs <file> <lang1> [<lang2>...]"
    echo "  Keep only the subtitles with the given language codes."
    return 1
  fi

  local input_path="$1"; shift
  local input_filename=$(basename "$input_path") # remove eventual path, output is for CWD
  local input_filename_no_ext="${input_filename%.*}" # remove extension
  local langs=() langs_str
  for lang in "$@"; do
    langs+="$lang"
    langs_str+="$lang,"
  done
  langs_str="${langs_str[1,-2]}" # remove last ','
  local output_path="${input_filename_no_ext}.only-subs(${langs_str}).mkv"

  local cmd=(ffmpeg -hide_banner)
  cmd+=(-i "$input_path") # input
  cmd+=(-c copy)
  cmd+=(-map 0:V -map 0:a) # video, then all audios
  # add subtitles of the wanted languages
  for lang in "${langs[@]}"; do
    # '0:s' for subtitles streams
    # and with additional specifier 'm:language:<lang>'
    # to only match subtitles with metadata of <lang>
    cmd+=(-map 0:s:m:language:$lang)
  done
  # output
  cmd+=("$output_path")

  _ffmpeg::display_and_run "${cmd[@]}"
  local ret=$?
  if [[ $? == 0 ]]; then
    echo
    echo "--- File with only subs (${langs_str}) -> '$output_path'"
    echo
  fi
  return $ret
}

function ffprobe::show-top-level
{
  if [[ $# == 0 ]]; then
    echo "Usage: ffprobe::show-top-level <files>..."
    echo "  Show top-level informations (streams, duration, ..) for the given files"
    return 1
  fi

  for input_path in "$@"; do
    echo "Main media info for '$input_path'"
    ffprobe -hide_banner "$input_path" 2>&1 | grep '^  \w'
    # Top level lines are prefixed by 2 spaces.
    echo
  done
}

# This function only needs to exist, when I call it, this file
# will get executed and the helper functions will be in scope.
function ffmpeg::load_funcs
{
  echo "Helper functions already loaded!"
}
echo "Helper functions loaded!"
