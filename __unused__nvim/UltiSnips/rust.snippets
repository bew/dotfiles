#######################################################################
#                            Rust Snippets                            #
#######################################################################

snippet let "let variable declaration" b
let ${1:name}${2:: ${3:type}} = ${4};
endsnippet

snippet letm "let mut variable declaration" b
let mut ${1:name}${2:: ${3:type}} = ${4};
endsnippet

# Increase priority of this 'fn' snippet, to avoid conflict with the
# other 'fn' snippet, used for closure when the cursor is not at BOL.
priority 10
snippet fn "A function, optionally with arguments and return type." b
${1:pub }fn ${2:function_name}(${3:arg: type})${4: -> ${5:ret_type}} {
	${10:${VISUAL}}
}
endsnippet
priority 0

snippet fn "Closure, anonymous function (inline)" w
|$1| {$2}
endsnippet

snippet p "println!(..) with endline" w
println!("$1"$2);
endsnippet

snippet ep "eprintln!(..) with endline" w
eprintln!("$1"$2);
endsnippet

snippet pi "print!(..) inline" w
print!("$1"$2);
endsnippet

snippet wi "write!(..) inline" w
write!(${1:writer}, "$2"$3)
endsnippet

# Using $VISUAL then $1 allows to start to write a string, then need to
# interpolate something, select the string, expand `fmt` snip, and continue
# writing the string with interpolations.
snippet fmt "format!(..)" w
format!("${VISUAL/"//g}$1"$2)
endsnippet

snippet dbg "Debug expression" w
dbg!(${1:${VISUAL}})
endsnippet

snippet ma "match .. { .. }" w
match ${1:${VISUAL:expr}} {$2}
endsnippet

# Useful when I have a few lines selected in visual mode.
snippet blk "{ .. } block" w
{
	${0:${VISUAL}}
}
endsnippet

snippet blki "{ .. } inline block" w
{ ${1:${VISUAL}} }
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} (
	(${2:matcher}) => (
		$0
	)
)
endsnippet

snippet for "for .. in .." b
for ${1:i} in ${2:iter_expr} {
	${0:${VISUAL}}
}
endsnippet

snippet com "Comment"
// $0
endsnippet

snippet doc "Doc comment" b
/// $0
endsnippet

snippet todo "A TODO comment"
// TODO: $0
endsnippet

snippet !fixm(e)?! "A FIXME comment" r
// FIXME: $0
endsnippet

snippet note "A Note comment"
// NOTE: $0
endsnippet

snippet st "Struct type" b
${1:pub }struct ${2:Name} {$3}
endsnippet

snippet sf "Struct field" b
${1:pub }${2:field_name}: ${3:()},
endsnippet

snippet ann "#[...] annotation" b
#[${1:derive(${2:Debug$3})}]
endsnippet

snippet en "Enum" b
${1:pub }enum ${2:Name} {$3}
endsnippet

snippet impl "Struct/Trait implementation" b
impl ${1:TypeOrTrait}${2: for ${3:Type}} {
	$0
}
endsnippet

snippet implgen "Struct/Trait generic implementation" b
impl<${1:T}> ${2:TypeOrTrait}<${3:T}>${4: for ${5:Type}<${6:T}>} {
	$0
}
endsnippet

snippet implfmt "impl fmt Display for Type" b
impl std::fmt::Display for ${1:Type} {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		$0
	}
}
endsnippet

snippet tr "Trait declaration" b
${1:pub }trait ${2:Type}${3:: ${4:RequiredTypeBound}} {$10}
endsnippet

# Types helpers

snippet res "Result<>"
Result<${1:${VISUAL:()}}, ${2:ErrorType}>
endsnippet

snippet ares "anyhow::Result<>"
anyhow::Result<${1:${VISUAL:()}}>
endsnippet

snippet ok "Ok(...)" w
Ok(${1:${VISUAL:()}})
endsnippet

snippet opt "Option<Type>" w
Option<${1:${VISUAL:Type}}>
endsnippet

# Tests helpers

snippet tests_section "EOF test section" b
#[cfg(test)]
mod tests {
	use super::*;

	${0:// TODO: write test functions here...}
}
endsnippet

snippet fnt "A test function" b
#[test]
fn ${1:test_${2:something}}() {
	${0:${VISUAL}}
}
endsnippet

snippet assq "assert_eq!(...);" b
assert_eq!(${1:${VISUAL}}, $2);
endsnippet

# vim:ft=snippets:
