snippet #!
#!/usr/bin/env ${1:bash}
endsnippet

snippet init "Init guard for all scripts" b
# Safer shell script with these options
# -e          : exit if a command exits with non-zero status
# -u          : exit if an expanded variable does not exist
# -o pipefail : if a command in a pipeline fail, fail the pipeline
#               (e.g this now fails: false | true)
set -euo pipefail
endsnippet


# Control flow

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern})
		$10;;$11
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${1:[[ ${2:condition} ]]}; then
	$0
endsnippet

snippet fori "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${10:${VISUAL:true}}
done
endsnippet

snippet for "for ... in ... done (forin)"
for ${1:var}${2: in ${3:words}}; do
	${10:${VISUAL:true}}
done
endsnippet

snippet if "if ... then (if)"
if ${1:[[ ${2:condition} ]]}; then
	${10:${VISUAL:true}}
fi
endsnippet

snippet cond "[[ ... ]]"
[[ $1 ]]
endsnippet

snippet until "until ... (done)"
until ${1:[[ ${2:condition} ]]}; do
	${10:${VISUAL:true}}
done
endsnippet

snippet while "while ... (done)"
while ${1:[[ ${2:condition} ]]}; do
	${10:${VISUAL:true}}
done$99
endsnippet


# Syntax

snippet do "do ... done"
do
	${1:${VISUAL:true}}
done
endsnippet

snippet fn "Function ... { ... }" b
function ${1:name}
{
	${10:${VISUAL:true}}
}
endsnippet

snippet here "here document (here)"
<<-${1:'${2:TOKEN}'}
	${10:${VISUAL:true}}
${2/['"`](.+)['"`]/$1/}
endsnippet

# Variables

snippet loc "local var" b
local ${10:var}=$0
endsnippet

snippet locs "local string var" b
local ${10:var}="$20"$0
endsnippet

# Comment

snippet fline "Full line ---" b
# ----------------------------------------------------------------------------------
endsnippet

snippet mline "Mid line ---" b
# -------------------------------------------------------------
endsnippet

snippet sline "Small line ---" b
# ----------------------------------------
endsnippet


# vim:ft=snippets:
