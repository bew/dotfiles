# vim:set noet sts=4 sw=4 ts=4 ft=zsh:
################################################################
# anonymous function system
# github link ?
#
################################################################

DEBUG=1

readonly TMPFN_FUNC_PREFIX=__tmpfn_anon
readonly TMPFN_MIN_ID=0
integer TMPFN_CURRENT_ID
if (( TMPFN_CURRENT_ID <= TMPFN_MIN_ID )) then
	tmpfn/reset_count
fi

function echo_debug
{
	if [[ $DEBUG = 1 ]]; then
		print -- "[DEBUG]" $@ >&2
	fi
}

function tmpfn/help
{
	local err=$1

	function echo_err
	{
		echo $@ >&2
	}

	echo_err "Error: $err"
	echo_err "-------------------------------"
	echo_err "-- Usage"
	echo_err "tmpfn <fname> --in"
	echo_err "-> register a function that will executes instructions read from stdin"
	echo_err ""
	echo_err "tmpfn <fname> <instruction1> [<instruction2> [<...3>]]"
	echo_err "-> register a function that will executes <instruction1>, then <instruction2>, etc.."
	echo_err ""
	echo_err "Store the generated function name in <fname>"

	unfunction echo_err
}

function tmpfn/reset_count
{
	TMPFN_CURRENT_ID=$TMPFN_MIN_ID
}

function tmpfn/reset_all
{
	for (( i = 0; i < $TMPFN_CURRENT_ID; i++ )); do
		unfunction ${TMPFN_FUNC_PREFIX}_${i}
	done
	tmpfn/reset_count
}

function tmpfn/register
{
	local func_name=$1
	local instructions=$2

	local func_def=""
	func_def+="function $func_name { $instructions }"

	echo_debug "Going to eval:"
	echo_debug $func_def

	eval $func_def
}

function tmpfn
{
	# Grab the variable name where we need to store the result
	local result_variable=$1
	if [[ -z "$result_variable" ]]; then
		tmpfn/help "No arguments given"
		return 1
	fi
	shift

	# find instructions
	local instructions=()
	if [[ "$1" == "--in" ]]; then
		# from stdin
		shift;
		while read line; do
			instructions+=$line
		done
	else
		# from args
		instructions=($@)
	fi

	if [[ ${#instructions} = 0 ]]; then
		tmpfn/help "No instructions given"
		return 1
	fi

	# Join instructions with '\n'
	local instructions_str=${(F)instructions[@]}


	local func_name=${TMPFN_FUNC_PREFIX}_${TMPFN_CURRENT_ID}
	(( TMPFN_CURRENT_ID += 1))

	if ! tmpfn/register "$func_name" "$instructions_str"; then
		tmpfn/help "bad instructions"
		return 1
	fi

	# Store the result for the user
	unset $result_variable
	eval "${result_variable}=${func_name}"
}
