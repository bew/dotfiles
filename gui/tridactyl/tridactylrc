#   _____     _     _            _         _
#  |_   _| __(_) __| | __ _  ___| |_ _   _| |
#    | || '__| |/ _` |/ _` |/ __| __| | | | |
#    | || |  | | (_| | (_| | (__| |_| |_| | |
#    |_||_|  |_|\__,_|\__,_|\___|\__|\__, |_|
#                                    |___/
#



# Theme 'shydactyl' puts the command promp in the middle of the window, like
# fuzzy launchers in some editors. It allows to _always_ see the mode
# indicator, even when a fillcmdline_tmp 'toast' is visible. With the 'dark'
# theme, the mode indicator is hidden behind the command prompt..
colors shydactyl

fillcmdline_tmp 3000 Reloading Tridactyl config...... (takes ~15s seconds)

# Restore default config
# => Disabled on config reload, there is no correct way to reset config reliably. 'sanitize' is
#    actually async and we don't know when the local storage will be erased..
command set_defaults sanitize tridactyllocal

# Explore current config with: `:viewconfig`

# --------------------------------------------------------
# Options & Setup

set smoothscroll true

set incsearch true

# Disable `input` mode, make `gi` always enter `insert` mode.
#
# About typing modes, there are `insert` & `input` modes:
# `input` mode is conceptually the same as `insert` mode with extra keybindings to use
# tab/shift-tab to cycle text inputs.
# Due to some complexity, author of Tridactyl didn't implement custom bindings inheritence, so
# custom keys defined in `insert` mode are NOT available in `input` mode.
# By default `gi` (from normal mode) enters `input` mode.
# Ref: https://matrix.to/#/!xmubtggllUtLrQiGyn:matrix.org/$1646690509227197OySpW:matrix.org
set gimode firefox

# --------------------------------------------------------
# Key bindings

# A : Alt
# CA : Ctrl-Alt
#
# A-d is Alt-d
# A-D is Alt-Shift-d

# Reload config file
# NOTE: The config takes some time to load completely (~15s), because of a bug
#       somewhere in Tridactyl that was loading only some parts of config file.
#       Each line of the config is loaded with a delay to workaround that issue.
#       Ref: https://matrix.to/#/!xmubtggllUtLrQiGyn:matrix.org/$1607877211548340BLAuN:matrix.org
#            https://github.com/tridactyl/tridactyl/issues/1409
#
# NOTE: Tridactyl's native messenger is REQUIRED to be able to load the config from a file
bind <C-R> source
bind --mode=ignore <C-R> source
bind --mode=insert <C-R> source

# Toggle ignore mode
bind --mode=normal <F9> mode ignore
bind --mode=insert <F9> mode ignore
bind --mode=ignore <F9> mode normal

# --- Unbind many builtins I don't want...

# vim' increment (here, for the url)
unbind <C-a>
unbind <C-x>
# vim' up/down (by line & by page)
unbind <C-u>
unbind <C-d>
unbind <C-f>
unbind <C-b>
# Edit textbox in favorite editor
# (<C-i> is usually used in rich-textboxes to toggle italic styling)
unbind --mode=insert <C-i>
# All letters (except a selected few, like j/k)
unbind A
unbind B
unbind D
unbind F
unbind H
unbind J
unbind K
unbind L
unbind M
unbind O
unbind P
unbind R
unbind S
unbind --mode=visual S
unbind T
unbind U
unbind W
# dangerous! I can do :qall manually if needed!
unbind ZZ
unbind a
unbind b
unbind d
unbind f
unbind m
unbind o
unbind p
unbind r
unbind s
unbind --mode=visual s
unbind t
unbind u
unbind w
unbind x

# Open Tridactyl' cmdline from any mode
bind --mode=insert <A-:> fillcmdline_notrail
bind --mode=normal <A-:> fillcmdline_notrail
bind --mode=hint   <A-:> fillcmdline_notrail
bind --mode=visual <A-:> fillcmdline_notrail

# Ignore next keybind
# (don't use C-v for this, as this can prevent use of C-v in non-input context, like copying cells
# in Excel/GithubProjects)
unbind <C-v>
bind <C-A-i>   nmode ignore 1 mode normal

# --- Open bindings

# open new tab (right after current tab)
#
# Opened issue for more positioning:
# https://github.com/tridactyl/tridactyl/issues/4257
bind <A-t> tabopen --focus-address-bar
bind --mode=insert <A-t> tabopen --focus-address-bar

# PREFIX <A-f>: Do actions via hints on the page

# Open target in current tab
bind <A-f> hint
bind --mode=insert <A-f> hint
# Open target in new tab, in background
bind <A-F> hint -b
bind --mode=insert <A-F> hint -b
# NOTE: There are MANY options for `hint`, see `:h hint` :)

# --- hint mode bindings (to help selection / navigation)

# Same as backspace, to remove a key in case of mistake
bind --mode=hint <C-h> hint.popKey
# Focus the hint!
bind --mode=hint <A-h> hint.focusLeftHint
bind --mode=hint <A-j> hint.focusBottomHint
bind --mode=hint <A-k> hint.focusTopHint
bind --mode=hint <A-l> hint.focusRightHint
# Select the hint just after focusing it (Alt still pressed)
bind --mode=hint <A-Space> hint.selectFocusedHint

# --- Tab bindings

# tab goto & movement
# TODO: Try with --mode=browser to set it everywhere at once
#       ==> Does not seems to work :/
bind <A-a> tabprev
bind <A-z> tabnext
bind --mode=insert <A-a> tabprev
bind --mode=insert <A-z> tabnext
bind --mode=ex     <A-a> tabprev
bind --mode=ex     <A-z> tabnext
bind <A-A> tabmove -1
bind <A-Z> tabmove +1
bind --mode=insert <A-A> tabmove -1
bind --mode=insert <A-Z> tabmove +1
bind --mode=ex     <A-A> tabmove -1
bind --mode=ex     <A-Z> tabmove +1
# NOTE: Those can also be mapped externally (e.g. via AutoHotkey), FF has many builtin keybinds:
# https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly

# tab operations
bind <CA-t> tabduplicate
bind <CA-n> tabdetach

# tab close

command tabclose_safe \
    jsb (async () => { \
      const tab = await tri.webext.activeTab(); \
      if (!tab.pinned) { \
        browser.tabs.remove(tab.id) \
      } else { \
        tri.excmds.fillcmdline_tmp(2000, "# tab is pinned, cannot close!") \
      } \
    })()

bind <A-d> tabclose_safe
bind --mode=insert <A-d> tabclose_safe
bind --mode=visual <A-d> tabclose_safe
bind --mode=hint <A-d> tabclose_safe

# tab pin
bind <A-c> pin
bind --mode=insert <A-c> pin

# undo tab close (in current window only)
bind <A-u> undo tab_strict
# undo window close
bind <A-U> undo window
# note: other kind possible:
# - 'recent' (can be tab or window)
# - 'tab' (tab in any window)

# history
bind <CA-a> back
bind <CA-z> forward
bind --mode=insert <CA-a> back
bind --mode=insert <CA-z> forward
bind --mode=ex <CA-a> back
bind --mode=ex <CA-z> forward
# For some reason <CA-a> stopped working for now... (currently on FF 105)
bind <CA-h> back
bind <CA-l> forward

# --- Page bindings

# Find a likely next/previous link and follow it (in current tab)
bind ]] followpage next
bind [[ followpage prev

# page movement
# The default jump of 10 is a bit much.
bind j scrollline 5
bind k scrollline -5
bind J scrollline 15
bind K scrollline -15

# page reload
bind <A-r> reload
bind <A-R> reloadhard
bind --mode=insert <A-r> reload
bind --mode=insert <A-R> reloadhard

# rudimentary page search mode
bind <A-/> fillcmdline find
bind <A-?> fillcmdline find -?
bind <A-n> findnext 1
bind <A-N> findnext -1
bind ยง nohlsearch

# Make sure <Escape> isn't bound, so it is directly sent to the page in most cases.
# (necessary for some popups like the Ctrl-k search popups, reddit post preview, ...)
#
# NOTE for insert mode: Since most websites that care about UX bind `Escape` only when an input is
# focused, Tridactyl's default of going back to normal mode followed by me sending Escape to the
# page itself would not invoke the website's handler to hide some UI/popups..
# Use `<A-Escape>` in insert mode to go back to normal mode without sending `Escape` to the page.
#
# NOTE for visual mode: Tridactyl's default in visual mode is NOT disabled, use `Escape-Escape` to
# go back to normal mode, then send actual `Escape` to the page.
unbind               <Escape>
unbind --mode=insert <Escape>

# Go back to normal mode in tridactyl (page itself doesn't receive `Escape`)
bind               <A-Escape> mode normal
bind --mode=insert <A-Escape> composite unfocus ; mode normal
bind --mode=insert <A-q> composite unfocus ; mode normal
# Also bind A-q in case A-Escape can't be mapped (like on Windows it seems)

# --- insert mode bindings

# Try to remap some insert keys to help navigation
# % Move by char
# (using 'xdotool' to inject arrows, to be able to control autocompletions popups, like Github's emoji popup)
#
#   !!! NOTE !!!
#   This keybind uses Alt-something, but xdotool will clear & re-apply Alt to properly
#   send Escape to the window.
#   If I do Alt+something-triggering-xdotool but release it after 1s (without other action),
#   the browser will see a Alt press-release (the press comes from xdotool re-applying Alt after
#   clearing it, the release is me), which by default opens the menubar (with File, View...).
#
#   % How to disable Alt press-release opening the menubar
#   Open about:config and set `ui.key.menuAccessKeyFocuses` to `false`.
#   Ref: https://support.mozilla.org/en-US/questions/1278533
#   |
#   ALTERNATIVE:
#   Prepend `xdotool keyup Alt` and remove `--clearmodifiers` for the next xdotool. This will
#   ensure Alt is not disabled then re-enabled. The main downside is that it's not possible to
#   chain Alt-something keybinds because Alt is not pressed anymore after xdotool was called.
bind --mode=insert <A-h>      composite mode ignore ; exclaim_quiet xdotool key --clearmodifiers Left ; mode insert
bind --mode=insert <A-j>      composite mode ignore ; exclaim_quiet xdotool key --clearmodifiers Down ; mode insert
bind --mode=insert <A-k>      composite mode ignore ; exclaim_quiet xdotool key --clearmodifiers Up   ; mode insert
bind --mode=insert <A-l>      composite mode ignore ; exclaim_quiet xdotool key --clearmodifiers Right; mode insert
# % Move by word
bind --mode=insert <A-b>      text.backward_word
bind --mode=insert <A-w>      text.forward_word
# % Move to begin/end
bind --mode=insert <A-$>      text.end_of_line
bind --mode=insert <A-^>      text.beginning_of_line
# % Delete to BOL
bind --mode=insert <C-u>      text.backward_kill_line
# % Delete to BOW
# => doesn't work, still closes current tab
#bind --mode=insert <C-w>      text.backward_kill_word

# Edit textboxes in favorite editor <3
# (will open file %f at line %l and column %c, centering the view if needed)
set editorcmd flatpak run org.wezfurlong.wezterm start --always-new-process nvim %f -c 'normal! %lG%c|zz'
# Ref: moz-extension://d4be4c81-b633-439c-8d53-744227c38bed/static/docs/modules/_src_excmds_.html#editor
alias editor_rm composite editor | jsb -p tri.native.run(`rm -f '${JS_ARG[0]}'`)
bind --mode=insert <A-i> editor_rm

# --- ex mode bindings

# text actions (movement, changes)

bind --mode=ex <A-h> text.backward_char
bind --mode=ex <A-l> text.forward_char

bind --mode=ex <A-w> text.forward_word
bind --mode=ex <A-b> text.backward_word
bind --mode=ex <A-g> text.beginning_of_line
bind --mode=ex <A-G> text.end_of_line

# FIXME: I want to kill to last / or the last word
# bind --mode=ex <A-Backspace> 

# cmdline actions

bind --mode=ex <A-j> ex.next_history
bind --mode=ex <A-k> ex.prev_history

bind --mode=ex <A-n> ex.next_completion
bind --mode=ex <A-p> ex.prev_completion
bind --mode=ex <Down> ex.next_completion
bind --mode=ex <Up> ex.prev_completion

# URL based config

# Disable on OnShape's CAD which uses many bindings
autocmd DocStart  cad.onshape.com  mode ignore

# Disable some toplevel keys that are better handled by the website
unbindurl read.readwise.io j
unbindurl read.readwise.io k


# --------------------------------------------------------
# (must be at the end, indicates config (re)load finished!)
fillcmdline_tmp 1000 Config (re)loaded!

# vim:set ft=conf:
