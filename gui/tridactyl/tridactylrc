# Restore default config first!
sanitize tridactyllocal

# Explore current config with: `:viewconfig`

# --------------------------------------------------------
# Options & Setup

set theme dark

set smoothscroll true

set incsearch true

# Set the browser's homepage to the newtab page of the plugin
# NOTE: This works by changing the user.js file in my profile, and needs
#       a firefox restart to be applied.
composite jsb browser.runtime.getURL("static/newtab.html") | setpref browser.startup.homepage

# Disable `input` mode, make `gi` always enter `insert` mode.
#
# About typing modes, there are `insert` & `input` modes:
# `input` mode is conceptually the same as `insert` mode with extra keybindings to use
# tab/shift-tab to cycle text inputs.
# Due to some complexity, author of Tridactyl didn't implement custom bindings inheritence, so
# custom keys defined in `insert` mode are NOT available in `input` mode.
# By default `gi` (from normal mode) enters `input` mode.
# Ref: https://matrix.to/#/!xmubtggllUtLrQiGyn:matrix.org/$1646690509227197OySpW:matrix.org
set gimode firefox

# --------------------------------------------------------
# Key bindings

# A : Alt
# CA : Ctrl-Alt

# Reload config file
# NOTE: The config takes some time to load completely (~10s), because of a bug
#       somewhere in Tridactyl that was loading only some parts of config file.
#       Each line of the config is loaded with a delay to workaround that issue.
#       Ref: https://matrix.to/#/!xmubtggllUtLrQiGyn:matrix.org/$1607877211548340BLAuN:matrix.org
#            https://github.com/tridactyl/tridactyl/issues/1409
command reload_my_config composite \
    fillcmdline_tmp 5000 Starting config reload...... (takes ~15s seconds) \
    | source \
    | fillcmdline_tmp 1000 Config reloaded!
bind <C-R> reload_my_config
bind --mode=ignore <C-R> reload_my_config
bind --mode=insert <C-R> reload_my_config

bind --mode=normal <C-F12> mode ignore
bind --mode=insert <C-F12> mode ignore
bind --mode=ignore <C-F12> mode normal

# unbind many builtins...

# vim' increment (here, for the url)
unbind <C-a>
unbind <C-x>
# vim' up/down (by line & by page)
unbind <C-u>
unbind <C-d>
unbind <C-f>
unbind <C-b>
# visual search
unbind --mode=visual S
unbind --mode=visual s
# others...
unbind A
unbind B
unbind D
unbind F
unbind H
unbind J
unbind K
unbind L
unbind M
unbind O
unbind R
unbind S
unbind T
unbind U
unbind W
# dangerous! I can do :qall manually if needed!
unbind ZZ
unbind a
unbind b
unbind d
unbind f
unbind o
unbind r
unbind s
unbind t
unbind u
unbind w
unbind x

# Open Tridactyl' cmdline from any mode
bind --mode=insert <A-:> fillcmdline_notrail
bind --mode=normal <A-:> fillcmdline_notrail
bind --mode=hint   <A-:> fillcmdline_notrail
bind --mode=visual <A-:> fillcmdline_notrail

# --- Open bindings

# open in new tab
# Opened issue for more positioning: https://github.com/tridactyl/tridactyl/issues/4257
bind <A-t> fillcmdline tabopen
bind --mode=insert <A-t> fillcmdline tabopen

# open
bind <A-o> fillcmdline open
bind --mode=insert <A-o> fillcmdline open

# open with search engine
bind <A-s> fillcmdline open search

# open by hint on the page
bind <A-f> hint
# Open target in background
bind <A-F> hint -b
# NOTE: There are MANY options for `hint`, see `:h hint` :)

# --- hint mode bindings

# Same as backspace, to remove a key in case of mistake
bind --mode=hint <C-h> hint.popKey
# Focus the hint!
bind --mode=hint <A-h> hint.focusLeftHint
bind --mode=hint <A-j> hint.focusBottomHint
bind --mode=hint <A-k> hint.focusTopHint
bind --mode=hint <A-l> hint.focusRightHint
# Select the hint just after focusing it (Alt still pressed)
bind --mode=hint <A-Space> hint.selectFocusedHint

# --- Tab bindings

# tab goto & movement
# TODO: Try with --mode=browser to set it everywhere at once
#       ==> Does not seems to work :/
bind <A-a> tabprev
bind <A-z> tabnext
bind --mode=insert <A-a> tabprev
bind --mode=insert <A-z> tabnext
bind --mode=ex     <A-a> tabprev
bind --mode=ex     <A-z> tabnext
bind <A-A> tabmove -1
bind <A-Z> tabmove +1
bind --mode=insert <A-A> tabmove -1
bind --mode=insert <A-Z> tabmove +1
bind --mode=ex     <A-A> tabmove -1
bind --mode=ex     <A-Z> tabmove +1

# tab operations
bind <CA-t> tabduplicate
bind <CA-n> tabdetach

# tab close

command tabclose_safe \
    jsb (async () => { \
      const tab = await tri.webext.activeTab(); \
      if (!tab.pinned) { \
        browser.tabs.remove(tab.id) \
      } else { \
        tri.excmds.fillcmdline_tmp(2000, "# tab is pinned, cannot close!") \
      } \
    })()

bind <A-d> tabclose_safe
bind --mode=insert <A-d> tabclose_safe
bind --mode=visual <A-d> tabclose_safe
bind --mode=hint <A-d> tabclose_safe

# tab pin
bind <A-c> pin
bind --mode=insert <A-c> pin

# undo tab close (in current window only)
bind <A-u> undo tab_strict
# undo window close
bind <A-U> undo window
# note: other kind possible:
# - 'recent' (can be tab or window)
# - 'tab' (tab in any window)

# history
bind <CA-a> back
bind <CA-z> forward
bind --mode=insert <CA-a> back
bind --mode=insert <CA-z> forward
bind --mode=ex <CA-a> back
bind --mode=ex <CA-z> forward

# --- Page bindings

# page movement
# The default jump of 10 is a bit much.
bind j scrollline 5
bind k scrollline -5

# page reload
bind <A-r> reload
bind <A-R> reloadhard
bind --mode=insert <A-r> reload
bind --mode=insert <A-R> reloadhard

# rudimentary page search mode
bind <A-/> fillcmdline find
bind <A-?> fillcmdline find -?
bind <A-n> findnext 1
bind <A-N> findnext -1
bind § nohlsearch

# Send Escape to the page itself
# NOTE: (on windows) couldn't map <A-Escape> for some reason, maybe related to my autohotkey setup w.r.t caps>>ctrl/escape
bind <A-e> js window.dispatchEvent(new KeyboardEvent("keydown", {key: "Escape"}))
bind --mode=insert <A-e> js window.dispatchEvent(new KeyboardEvent("keydown", {key: "Escape"}))
bind --mode=visual <A-e> js window.dispatchEvent(new KeyboardEvent("keydown", {key: "Escape"}))

# --- insert mode bindings
# FIXME: Can I remap keys à-la-AHK, like A-b/w to Ctrl-Left/Right?
#   => if yes, remap all insert movements! (hjkl, w, b, ^, $, g, G)

# --- ex mode bindings

# text actions (movement, changes)

bind --mode=ex <A-h> text.backward_char
bind --mode=ex <A-l> text.forward_char

bind --mode=ex <A-w> text.forward_word
bind --mode=ex <A-b> text.backward_word
bind --mode=ex <A-g> text.beginning_of_line
bind --mode=ex <A-G> text.end_of_line

# FIXME: I want to kill to last / or the last word
# bind --mode=ex <A-Backspace> 

# cmdline actions

bind --mode=ex <A-j> ex.next_history
bind --mode=ex <A-k> ex.prev_history

bind --mode=ex <A-n> ex.next_completion
bind --mode=ex <A-p> ex.prev_completion
bind --mode=ex <Down> ex.next_completion
bind --mode=ex <Up> ex.prev_completion

# URL based binds

# Quick go to notifications!
bindurl github.com nn js tri.dom.simulateClick(document.querySelector("a.notification-indicator"))

# reddit.com, simulate clicking on the Close button of an opened post
bindurl reddit.com <Escape> js tri.dom.simulateClick(document.querySelector("*[aria-label=Close]"))
bindurl reddit.com <A-Escape> composite mode normal | hide cmdline

# FIXME: <Escape> should not be set per site, but should be a generic key binding, that switch to
# Tridactyl's "ignore" mode, inject the "Escape" key and go back to "normal" mode.. (and maybe
# also hide the cmdline to get the normal <Escape> behavior of Tridactyl)

# vim:set ft=conf:
