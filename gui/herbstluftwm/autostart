#!/usr/bin/env bash

function hc {
  herbstclient "$@"
}

# TODO?: I could make dynamic keys (in bash / any language (Rust? :P)) by binding a key to
# 'emit_hook myaction-do-something' and then using a watcher daemon to listen to key-sent hooks :)

hc emit_hook reload

# reset keybind, mousebind, theme attr, rules
# FIXME: no way to reset options (set/get)?
hc keyunbind --all
hc mouseunbind --all
hc attr theme.reset 1
hc unrule -F

# keybindings
M=Mod4   # Use the super key as the main modifier
C=Control
S=Shift
A=Alt

# WM-level actions
# hc keybind $M-$C-q   quit
hc keybind $M-$C-r   reload

# WM agnostic keys

# lock (& sleep)
hc keybind Pause      spawn ~/.bin-gui/i3colocker
hc keybind $C-Pause   spawn ~/.bin-gui/desktop--lock-and-sleep ~/.bin-gui/i3colocker
# FIXME? (but how to fix?) the screen flashes with the 'theme.background_color' just
# before i3lock is displayed with a blurry screenshot.
# --> Seems to be related with the bash script starting i3lock. Starting i3lock
#     without script does not flicker.

# Type in a brain2 ID
hc keybind $M-$C-i     spawn sh -c '~/.bin/mkid-now | ~/.bin/clipboard-provider--xclip copy && notify-send "Brain ID copied to clipboard"'

hc keybind $M-space    spawn ~/.bin-gui/wezterm
hc keybind $M-$A-space spawn alacritty

# TODO: move these 'common' options to a script, to be usable anywhere!
ROFI_OPTS_LIST=()
ROFI_OPTS_LIST+=(-theme Paper)
ROFI_OPTS_LIST+=(-matching fuzzy)
ROFI_OPTS_LIST+=(-scroll-method '1') # 0: Per page, 1: continuous.
ROFI_OPTS_LIST+=(-kb-row-down 'Alt+j,Down')
ROFI_OPTS_LIST+=(-kb-row-up 'Alt+k,Up')
ROFI_OPTS_LIST+=(-kb-move-word-forward 'Alt+w')
ROFI_OPTS_LIST+=(-kb-clear-line 'Control+c')
ROFI_OPTS_LIST+=(-kb-remove-word-back 'Control+w')
ROFI_OPTS_LIST+=(-kb-mode-next 'Alt+Tab')
# for these 2, the keybinding is already used, so we must disable it to use it for another action
ROFI_OPTS_LIST+=(-kb-move-end 'Alt+dollar,Alt+End' -kb-custom-14 '')
# FIXME: The keybind Alt+^ (dead_circumflex) doesn't work
#        See https://github.com/davatorium/rofi/issues/1394
# ROFI_OPTS_LIST+=(-kb-move-front 'Alt+dead_circumflex' -kb-custom-16 '')
ROFI_OPTS_LIST+=(-kb-move-front 'Alt+Home' -kb-custom-16 '')

# FIXME: {w} is desktop name, {c} is class. => There's no vertical alignment, even when forcing it..
#        See unresolved discussion at:
#        https://app.element.io/#/room/#rofi:libera.chat/$dAieVXu7Qr6cjIBFZh4rqgWMqeNuWQeW3WJeywQbVdo
# ROFI_OPTS_LIST+=(-window-format '{w:20}  [{c}]  {t}')

# -drun-show-actions : show actions present in the Desktop files
#                      (like New window / New private window for Firefox)
hc keybind $M-x       spawn rofi -modi drun,window,run -show drun -drun-show-actions "${ROFI_OPTS_LIST[@]}"

# TODO: need an (interactive) action menu for chains: M-x space, M-x f, M-x t
# could also be used for window state (toggle on top, floating, ..)

# basic random wallpaper selection
hc keybind $M-w   spawn feh --bg-scale --no-fehbg --recursive --randomize ~/wallpapers/

# volume management using pamixer
hc keybind $S-XF86AudioLowerVolume  spawn pamixer --decrease 1
hc keybind $S-XF86AudioRaiseVolume  spawn pamixer --increase 1
hc keybind XF86AudioLowerVolume     spawn pamixer --decrease 5
hc keybind XF86AudioRaiseVolume     spawn pamixer --increase 5

hc keybind XF86AudioMute      spawn pamixer --toggle-mute
hc keybind $M-XF86AudioMute   spawn pavucontrol # helper for sound settings

# TODO: add brightness keys
# TODO: add network pinger

# end of WM agnostic keys

# FIXME: how to implement window locking? (On $M-$C-l ?)

# basic movement
# focusing clients
hc keybind $M-h   focus left
hc keybind $M-j   focus down
hc keybind $M-k   focus up
hc keybind $M-l   focus right

# moving clients (inside a frame, or to the next frame in the given direction)
hc keybind $M-$S-h   shift left
hc keybind $M-$S-j   shift down
hc keybind $M-$S-k   shift up
hc keybind $M-$S-l   shift right

# splitting frames
# create an empty frame in the specified direction and focus it
hc keybind $M-$C-Left    chain , split left    0.5 , focus -e left
hc keybind $M-$C-Right   chain , split right   0.5 , focus -e right
hc keybind $M-$C-Down    chain , split bottom  0.5 , focus -e down
hc keybind $M-$C-Up      chain , split top     0.5 , focus -e up

# Splits the frame in such a way that the window sizes and positions are kept
# as much as possible.
# NOTE: When there are 3+ windows, the new frame is created after the focused window.
hc keybind $M-$C-e   split explode

# Remove a frame
hc keybind $M-r   remove # FIXME: $M-$C-r is already "reload!"

# FIXME: what is the workflow (and minimal keys) I want, to:
# - open a terminal quickely somewhere specific
# - move a window to somewhere specific
# - move a window to another tag/monitor (tag: done!)
# - open scratch terminal (using a monitor? with special mappings to layouting (ex: max))
# move a frame somewhere else (to another tag? --> does it even make sense?)

# Move focus between frames
#
# Make sure that a floating client stays focused if it was.
function bind_frame_focus
{
  local keybind="$1"
  local dir="$2"
  # this is basically:
  # if focused_client.floating:
  #   stop focusing floating layer
  #   focus a frame in the given direction
  #   start focusing floating layer (last focused client)
  # else:
  #   focus a frame in the given direction
  hc keybind "$keybind" \
    or  , and . compare clients.focus.floating = "true" \
              . chain : lock \
                      : attr tags.focus.floating_focused false \
                      : focus -e "$dir" \
                      : attr tags.focus.floating_focused true \
                      : unlock \
        , focus -e "$dir"
}
bind_frame_focus $M-$C-h   left
bind_frame_focus $M-$C-j   down
bind_frame_focus $M-$C-k   up
bind_frame_focus $M-$C-l   right

# Close current window if any or remove frame if empty
hc keybind $M-$S-c close_or_remove

# tags

# FIXME: how to implement dynamic tags (with traversing)
#   What about tag groups? (would need a special keymap to navigate groups..
#   not enough keys otherwise)

# cycle through tags (skip already visible tags on another monitor)
# NOTE: would need to change if I want to insert tags anywhere, since hlwm
#       does not support insertion (yet) I can't use the 'linear' use_index +1 -1.
hc keybind $M-a   use_index -1 --skip-visible
hc keybind $M-z   use_index +1 --skip-visible
# Also bind Mod-{Left,Right}, because the touchpad gestures are bound to that.
hc keybind $M-Left   use_index -1 --skip-visible
hc keybind $M-Right  use_index +1 --skip-visible

# Move current tag to the left/right
hc keybind $M-$C-a  attr tags.focus.index -=1
hc keybind $M-$C-z  attr tags.focus.index +=1

# Delete current tag if empty
# (only if there are at least 2 tags && current tag contains a single empty frame)
# NOTE: floating windows are not blocking, they will be merged in previous tag
hc keybind $M-$C-d \
  and \
    , compare tags.count ge 2 \
    , compare tags.focus.frame_count = 1 \
    , compare tags.focus.curframe_wcount = 0 \
    , chain \
        : lock \
        : substitute TAG_TO_DEL tags.focus.name \
            chain + use_index -1 \
                  + merge_tag TAG_TO_DEL \
        : unlock

# Move window to prev/next tag and make it floating (so I can place it where I want)
# TODO: also apply floatplacement=center ?
hc keybind $M-$S-a \
  chain : lock \
        : attr clients.focus.floating true \
        : move_index -1 --skip-visible \
        : use_index -1 --skip-visible \
        : unlock
hc keybind $M-$S-z \
  chain : lock \
        : attr clients.focus.floating true \
        : move_index +1 --skip-visible \
        : use_index +1 --skip-visible \
        : unlock

hc keybind $M-$A-r   spawn ~/.config/herbstluftwm/scripts/hlwm_rename_current_tag.py
hc keybind $M-$A-a   spawn ~/.config/herbstluftwm/scripts/hlwm_add_tag.py
hc keybind $M-$A-x   spawn ~/.config/herbstluftwm/scripts/hlwm_execute_hc.py

# layouting

# Toggle floating state.
# Note that when floating is turned off, the window will be inserted in the currently
# selected frame, not its original frame.
hc keybind $M-f   attr clients.focus.floating toggle
# FIXME: would it make sense to have a way to remember the parent frame?

# Make next window to open to be floating
# exclude rofi from rule matching, so I can do:
#    1. trigger this action
#    2. open rofi, type 'firefox', confirm
#    3. firefox is opened floating, centered :)
# (without the exclusion, the rule would have been applied on rofi launcher, which is useless)
hc keybind $M-$S-f   rule once not --instance=rofi floating=on floatplacement=center
# FIXME: I'd prefer to use '--once' to show it's a special arg, but in hc 0.9.4 it's broken.
#        ref: https://github.com/herbstluftwm/herbstluftwm/issues/1487

# Center current floating window
# hc keybind $M-$S-f \
#   and , compare tags.focus.floating_focused = true \
#       , apply_tmp_rule "" floating=on floatplacement=center
# FIXME: broken, see https://github.com/herbstluftwm/herbstluftwm/issues/1375

hc keybind $M-$C-m   fullscreen toggle # fullscreen current client
# hc keybind $M-$C-f floating toggle # all clients of current tag become floating (and stacked..)

# Toggle max layout on current frame, save/restore old layout as needed
# if current frame layout is max:
#     set_layout OLD_LAYOUT (from a custom attr)
# else:
#     try to create the frame custom attr (fails if already exist)
#     set frame custom attr to current layout algorithm
#     set_layout max
hc keybind $M-m   \
  or , and . compare tags.focus.focused_client.parent_frame.algorithm = max                             \
           . substitute OLD_LAYOUT tags.focus.focused_client.parent_frame.my_frame_layout_before_max    \
               set_layout OLD_LAYOUT                                                                    \
     , chain : try new_attr string tags.focus.focused_client.parent_frame.my_frame_layout_before_max    \
             : substitute CUR_LAYOUT tags.focus.focused_client.parent_frame.algorithm                   \
                 set_attr tags.focus.focused_client.parent_frame.my_frame_layout_before_max CUR_LAYOUT  \
             : set_layout max

# Cycle through frame layouts, skipping 'max' layout (which is toggled by another key).
#   - layouts for 2 clients: vertical, horizontal
#   - layouts for 1 or 3+ clients: vertical, horizontal, grid
hc keybind $M-s                                      \
  or , and . compare tags.focus.curframe_wcount = 2  \
           . cycle_layout +1 vertical horizontal     \
     , cycle_layout +1 vertical horizontal grid
# FIXME: Will need a way to see the current frame layout 'somewhere' (maybe on demand)

# mouse

# NOTE: Does nothing for tiled windows
hc mousebind $M-Button1   move

# Resize non-empty frames and floating windows
hc mousebind $M-Button3   resize

# Resizes the window into all four directions while keeping the center of the
# window constant (at the same place).
hc mousebind $M-$S-Button3   zoom

# screen/monitor focus
# (for left-hand only, so the right hand can stay on the mouse/touchpad)
# NOTE: can also use $M-hjkl (directional focus, crossing frame and monitor boundaries)
hc keybind $M-$S-s   cycle_monitor

# Screenshot (with intereactive gui)
hc keybind $M-$C-s   spawn flameshot gui

# FIXME: Add $M-Escape to select the LAST window.. not possible builtin..
hc keybind $M-Tab    cycle +1 # in a frame
hc keybind $M-$S-Tab cycle -1 # in a frame
hc keybind $M-c      cycle_all +1
hc keybind $M-u   jumpto urgent
# Cycle through floating clients only.
# -> Setting tags.focus.floating_focused to true switches to the floating layer and selects the first client.
# -> `cycle` cycles through the floating layer if it is focused.
hc keybind $M-$C-f                                        \
  or , and . compare tags.focus.floating_focused = false  \
           . attr tags.focus.floating_focused true        \
     , cycle

# theme

# a frame has a border, then some permanent lines for the frame's rectangle.
# since I cannot remove those lines and keep only the borders, I hide the borders.
hc set frame_border_width 0
hc set frame_border_active_color "#f00"
hc set frame_border_normal_color "#00f"

# If set, all frames are displayed.
# If unset, only frames with focus or with windows in them are displayed.
# NOTE: the frame in question is the frame's border, which is the only visible
# thing when the frame is empty.
hc set always_show_frame true

hc set frame_bg_normal_color "#565656"
hc set frame_bg_active_color "#aaaaaa"
hc set frame_bg_transparent true
hc set frame_transparent_width 3
hc set frame_gap 0
hc set frame_padding 5

# NOTE: 'color' is the bg color of the border
hc attr theme.active.color "#1E6C89"
hc attr theme.normal.color "#171717"
hc attr theme.urgent.color orange
hc attr theme.border_width 5
hc attr theme.background_color "#FFFFFF"

# max layout tabs
hc attr settings.tabbed_max true # show tabs when frame in 'max' layout
hc attr theme.title_when one_tab # whenever we are in max layout (with 1+ clients)
hc attr theme.title_height 15
hc attr theme.title_depth 4 # space below the title
hc attr theme.title_align center

hc attr theme.title_color "#777777"
hc attr theme.tab_color "#222222"
hc attr theme.active.title_color "#EEEEEE"

hc set window_gap 5
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0

# If set, a client’s window content is resized immediately during resizing it
# with the mouse. If unset, the client’s content is resized after the mouse
# button is released.
hc set update_dragged_clients 1

hc set focus_follows_mouse true
hc set raise_on_focus false
hc set raise_on_focus_temporarily false

# rules
hc rule focus=on # normally focus new clients

hc rule --windowtype~"_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)" floating=on
hc rule --windowtype="_NET_WM_WINDOW_TYPE_DIALOG" focus=on
hc rule --windowtype="_NET_WM_WINDOW_TYPE_SPLASH" floatplacement=center
hc rule --windowtype~"_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)" manage=off

hc rule --fixedsize floating=on # matches windows that cannot be resized (min size == max size)

hc rule --instance="pavucontrol" floating=true floatplacement=center
hc rule --instance="flameshot" floating=true floatplacement=center
hc rule --instance="Xephyr" floating=true floatplacement=center

hc rule --instance="copyq" floating=true #floatplacement=center
# @2022-06 floatplacement breaks it :/ I really need a way to force copyq to not place itself..
# TODO(?): detect main win reliably, and make it appear centered under mouse cursor
#   (but always fully on screen)
#   => Ask for 'floatplacement=mouse,on_screen'

hc rule --instance="yad" floating=true

hc rule --instance~".*kazam.*" floating=true

# unlock, just to be sure
hc unlock

herbstclient set tree_style "╾│ ├└╼─┐"

# -- multi monitor setup (making a monitor per physical display)
hc detect_monitors
