priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
    return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
    for scope in ["g", "b"]:
        for shell in ["bash", "posix", "sh", "kornshell"]:
            if testShell(scope, shell) == "1":
                if shell == "kornshell":
                    return "ksh"
                if shell == "posix":
                    return "sh"
                return shell
    return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
    ${2:pattern})
        $10;;$11
esac$99
endsnippet

snippet elif "elif .. (elif)"
elif ${1:[[ ${2:condition} ]]}; then
    $99
endsnippet

snippet fori "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
    $10
done$99
endsnippet

snippet for "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
    $10
done$99
endsnippet

snippet here "here document (here)"
<<-${1:'${2:TOKEN}'}
    $10
${2/['"`](.+)['"`]/$1/}$99
endsnippet

snippet if "if ... then (if)"
if ${1:[[ ${2:condition} ]]}; then
    $10
fi$99
endsnippet

snippet cond "[[ ... ]]"
[[ $1 ]]$99
endsnippet

snippet until "until ... (done)"
until ${1:[[ ${2:condition} ]]}; do
    $99
done
endsnippet

snippet while "while ... (done)"
while ${1:[[ ${2:condition} ]]}; do
    $10
done$99
endsnippet

snippet fun "Function ... { ... }" b
function ${1:name}
{
    $10
}$99
endsnippet

snippet do "do ... done"
do
    $1
done$99
endsnippet

# Comment

snippet fline "Full line ---" b
#----------------------------------------------------------------------------------
endsnippet

snippet mline "Mid line ---" b
#-------------------------------------------------------------
endsnippet

snippet sline "Small line ---" b
#----------------------------------------
endsnippet

snippet section "Comment Section" b
$1
# ${2:${VISUAL/^# //}}
$1$0
endsnippet

snippet header "Comment Header" b
# ${1:${VISUAL:Comment/^# //}}
$2$0
endsnippet



# vim:ft=snippets:
