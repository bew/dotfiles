priority -50

snippet |^#!| "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby$99
endsnippet

snippet req "require ..." b
require '$1'$99
endsnippet

snippet reqr "require_relative ..." b
require_relative '$1'$99
endsnippet

snippet do "do ... end"
do
	${VISUAL}$1
end$99
endsnippet

snippet doa "do |args| ... end"
do |${1:args}|
	${VISUAL}$10
end$99
endsnippet

snippet ido "{ ... }"
{ ${VISUAL}$1 }$99
endsnippet

snippet idoa "{ |args| ... }"
{ |${1:args}| ${VISUAL}$10 }$99
endsnippet

snippet def "def <name>..."
def ${1:function_name}${2:(${3:*args})}
	${VISUAL}$10
end$99
endsnippet

snippet ini "def initialize ..."
def initialize${1:(${2:*args})}
	${VISUAL}$10
end$99
endsnippet

snippet until "until <expression> ... end"
until ${1:expression}
	$0
end
endsnippet

snippet while "while <expression> ... end"
while ${1:expression}
	$0
end
endsnippet

snippet beg "begin ... rescue ... end"
begin
	${VISUAL}$1
rescue
	$2
end$99
endsnippet

snippet begin "begin ... rescue ... else ... ensure ... end"
begin
	${VISUAL}${1:# Raise exception}
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${2:# Rescue}
else
	${3:# other exception}
ensure
	${0:# always excute}
end
endsnippet

snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${99:# Rescue}
endsnippet

snippet case "case <variable> when <expression> ... end"
case ${1:variable}
when ${2:expression}
$10
end$99
endsnippet

snippet alias "alias :<new_name> :<old_name>"
alias :${1:new_name} :${2:old_name}
endsnippet

snippet cl "class <class_name> def initialize ... end end"
class ${1:ClassName}
	$99
end
endsnippet

snippet mod "module"
module ${1:ModuleName}
	${VISUAL}$99
end
endsnippet

snippet it "it <desc> do ... end" b
it ${1:"${2:description}"} do
	${VISUAL}$10
end$99
endsnippet

snippet describe "describe <desc> do ... end" b
describe ${1:"${2:description}"} do
	${VISUAL}$10
end$99
endsnippet

snippet ###
=begin
	$0
=end
endsnippet

# vim: set ts=2 sw=2 expandtab:
