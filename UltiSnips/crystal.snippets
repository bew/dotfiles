snippet #! "crystal run shebang!" b
#!/usr/bin/env crystal
endsnippet

snippet ann "Annotation @[...]"
@[${1:Annotation}${2:(${3:args})}]$99
endsnippet

snippet ini "def initialize without body"
def initialize${1:(${2:args})}
end$99
endsnippet

snippet init "def initialize"
def initialize${1:(${2:args})}
  ${VISUAL}$99
end
endsnippet

snippet unini "uninitialized Type"
uninitialized ${1:Type}$99
endsnippet

snippet req "require" b
require "${1:file}"$99
endsnippet

snippet def "method definition"
def ${1:method_name}${2:(${3:args})}
  ${VISUAL}$4
end$99
endsnippet

snippet mod "Module definition"
module ${1:ModuleName}
  ${VISUAL}$99
end
endsnippet

snippet st "Struct definition"
struct ${1:StructName}
  ${VISUAL}$99
end
endsnippet

snippet dst "Struct definition"
struct ${1:StructName} < ${2:BaseStruct}
  ${VISUAL}$99
end
endsnippet

snippet cl "Class definition"
class ${1:ClassName}
  ${VISUAL}$99
end
endsnippet

snippet dcl "Derived Class definition"
class ${1:ClassName} < ${2:BaseClass}
  ${VISUAL}$99
end
endsnippet

snippet inc "include Module" b
include ${1:Module}$99
endsnippet

snippet ext "extend Module" b
extend ${1:Module}$99
endsnippet

snippet enum "Enum definition"
enum ${1:EnumName}
  ${VISUAL}$99
end
endsnippet

snippet case "Case node"
case ${1:expr}
when ${2:expr}
  ${VISUAL}$99
end
endsnippet

snippet do "do ... end"
do
  ${VISUAL}$1
end$99
endsnippet

snippet doa "do |args| ... end"
do |${1:args}|
  ${VISUAL}$2
end$99
endsnippet

snippet ido "inline block { ... }"
{ ${VISUAL}$1 }$99
endsnippet

snippet idoa "inline block { |args| ... }"
{ |${1:args}| ${VISUAL}$2 }$99
endsnippet

snippet beg "begin .. rescue .. end"
begin
  ${VISUAL}$1
rescue ${2:ex${3: : ${4:SomeException}}}
  $5
end$99
endsnippet

# C helpers

snippet lib "lib binding" b
lib ${1:Lib${2:Name}}
  ${VISUAL}$3
end$99
endsnippet

snippet fun "C function or binding" b
fun ${1:fun_name}${2:(${3:args})}${4: : ${5:ReturnType}}$99
endsnippet

snippet funmain "main C function" b
fun main(argc : Int32, argv : UInt8**) : Int32
  ${VISUAL}$99
end
endsnippet

# Spec helpers

snippet !desc(ribe)?! "Spec - describe 'desc' do ... end" rb
describe "${1:description}" do
  ${VISUAL}$2
end$99
endsnippet

snippet it "Spec - it 'desc' do ... end" b
it "${1:description}" do
  ${VISUAL}$2
end$99
endsnippet

# Macro helpers

snippet !mac(ro)?! "Create a macro" rb
macro ${1:macro_name}${2:(${3:args})}
  ${VISUAL}$4
end$99
endsnippet

snippet ms "Macro stmt {% blabla %}" w
{% ${VISUAL}$1 %}$99
endsnippet

snippet me "Macro end" w
{% end %}$0
endsnippet

snippet mp "Macro printed stmt {{ blabla }}" w
{{ ${VISUAL}$1 }}$99
endsnippet

snippet mps "Short Macro printed stmt {{blabla}}" w
{{${VISUAL}$1}}$99
endsnippet

snippet md "Macro debug here" w
{% debug %}
endsnippet

snippet mbeg "{% begin %} .. {% end %}"
{% begin %}
  ${VISUAL}$1
{% end %}$99
endsnippet

