[core]
  excludesfile = ~/.gitignore

[user]
  email = benoit.dechezelles@gmail.com
  name = Benoit de Chezelles

[github]
  # some tools uses this
  user = bew

[push]
  # When 'push' subcmd is called without a remote branch,
  # use the current local branch name as the remote branch name.
  default = current

[pull]
  # Only allow fast-forward merge when using 'pull'.
  # => Non-ff merge is not attempted automatically and will need to be done manually.
  ff = only

[merge]
  # When 'merge' subcmd is called without any ref, merge the upstream branch in.
  defaultToUpstream = true

[help]
  autocorrect = -1 # without prompt

[color]
  interactive = true

[color "status"]
  untracked = "cyan"

[diff]
  # Give a little bit more context in diffs (defaut is 3)
  context = 10
  # TODO (bug report?): does not seems to work on diffs visible in `git add -p`.

  # Moved lines of code are colored differently
  colorMoved = default
  # Ignore whitespace changes for indentation only
  colorMovedWS = allow-indentation-change

  # Limit the size of --stat graph (++++----)
  # Important for `git show --patch-with-stat` to avoid line wrapping
  # (which is not automatically detected for some reasons..)
  statGraphWidth = 30

  tool = nvim_diff # NOTE: I _never_ use this....

[color "diff"]
  # color settings for 'colorMoved' option
  oldMoved = cyan 17
  newMoved = cyan 17

[difftool "nvim_diff"]
  cmd = nvim -d "$LOCAL" "$MERGED" "$REMOTE"

# Useful when I can't use SSH to communicate with github and I don't want to
# type my password/personal-token everytime.
#
# [credential "https://github.com"]
#   username = bew
#   helper = github-bew-password-from-env

[alias]

  # add & commit
  a = add
  ap = add -p
  an = add -N
  com = commit --verbose
  comp = com -p
  comam = com --amend

  # index manipulation
  f = fetch
  m = merge
  ch = checkout
  sth = stash
  untrack = rm --cached

  unstage = reset HEAD

  # remote interaction
  ph = push
  pl = pull
  rem = remote -v

  # info only
  #----------------------------

  br  = branch
  brv = "!git --no-pager branch -vv"

  s   = status --ignore-submodules=all
  suf = status --untracked-files

  # log (minimal)
  pretty-log = log --graph --decorate --date=format:'%a %e %b %Y [%H:%M]' --pretty=tformat:'%C(bold red)%h%C(reset) - %C(bold cyan)%ad%C(reset) | %C(green)%ar%C(reset)%C(auto)%d   %C(dim magenta)by %an%C(reset)%n%s%n'
  ll = pretty-log
  la = pretty-log --all
  lo = pretty-log --oneline

  # log (verbose)
  # (basically same as: pretty-log + the commit body & notes if available)
  pretty-log-verbose = log --graph --decorate --date=format:'%a %e %b %Y [%H:%M]' --pretty=format:'%C(bold red)%h%C(reset) - %C(bold cyan)%ad%C(reset) | %C(green)%ar%C(reset)%C(auto)%d   %C(dim magenta)by %an%C(reset)%n%s%n%+b%+N'
  llv = pretty-log-verbose
  lav = pretty-log-verbose --all

  # diff
  d  = diff
  dc = diff --staged
  dd  = diff -w
  ddc = diff -w --staged

  # Diff side-by-side with delta (instead of unified diff)
  dds = !git -c delta.features=split-layout dd
  ds  = !git -c delta.features=split-layout d

  # Helper to find the base-commit between a base branch (usually master/main) and
  # a head ref (usually HEAD).
  # (we want to find the commit before the first commit on the branch)
  z--base-branch-helper = !git merge-base --octopus ${BASE_BRANCH:-main@\\{u\\}} ${HEAD_REF:-HEAD}

  # --unified is for the up/down diff context around hunks
  review-branch          = !git diff --unified=30   $(git z--base-branch-helper)
  review-branch-full-ctx = !git diff --unified=9999 $(git z--base-branch-helper)
  # (now with side-by-side delta diff layout)
  review-branch-s          = !git dds --unified=30   $(git z--base-branch-helper)
  review-branch-full-ctx-s = !git dds --unified=9999 $(git z--base-branch-helper)

  stat = !git --no-pager diff --stat --summary
  stat-branch = !git stat $(git z--base-branch-helper)..

  show-with-stat = !git show --patch-with-stat --summary

  # last merge stats
  stat-last-merge = stat ORIG_HEAD..
  slm = stat-last-merge

  # last merge diff
  diff-last-merge = diff ORIG_HEAD..
  dlm = diff-last-merge

  # last merge logs
  log-last-merge = pretty-log ORIG_HEAD..
  llm = log-last-merge

  gc-remove-old-commits = reflog expire --all --expire=now
  gc-compress-repo = gc --aggressive --prune=now

# -- BEGIN delta config

[core]
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  features = unified-layout
  syntax-theme = DarkNeon

  paging = always ; always use a pager
  ; Note that diffs in `git add -p` will never use the pager.

  line-numbers = true

  relative-paths = true
  file-modified-label = "changed:"
  file-removed-label = "nuked:"
  hunk-label = "§"

  # Removed lines
  minus-style = normal 52
  minus-emph-style = normal bold 88

  # Added lines
  plus-style = syntax 22
  plus-emph-style = normal bold 28

  file-style = bold 166
  file-decoration-style = none
  # NOTE: the decoration styles ul/ol/box uses unicode chars AFAIK

  commit-decoration-style = ol

  hunk-header-style = 243 236 # light grey on dark grey
  hunk-header-decoration-style = bold

[delta "unified-layout"]
  features = navigate

  ; >> Unicode separators:
  line-numbers-left-format = {nm:^5}¦
  line-numbers-right-format = {np:^5}│
  ; >> ASCII separators:
  ; line-numbers-left-format = {nm:^5}:
  ; line-numbers-right-format = {np:^5}|

[delta "split-layout"]
  # NOTE: This group of delta settings is enabled for some of my git aliases
  #       using `git -c delta.features=split-layout ...`

  features = navigate side-by-side

  ; >> Unicode separators:
  line-numbers-left-format = ┃{nm:^5}│
  line-numbers-right-format = ┃{np:^5}│
  ; >> ASCII separators:
  ; line-numbers-left-format = |{nm:^5}|
  ; line-numbers-right-format = |{np:^5}|
  line-numbers-left-style = red
  line-numbers-right-style = green

# -- END delta config

# vim:set ft=gitconfig:
